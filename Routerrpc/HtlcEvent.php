<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: router.proto

namespace Routerrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 **
 *HtlcEvent contains the htlc event that was processed. These are served on a
 *best-effort basis; events are not persisted, delivery is not guaranteed
 *(in the event of a crash in the switch, forward events may be lost) and
 *some events may be replayed upon restart. Events consumed from this package
 *should be de-duplicated by the htlc's unique combination of incoming and
 *outgoing channel id and htlc id. [EXPERIMENTAL]
 *
 * Generated from protobuf message <code>routerrpc.HtlcEvent</code>
 */
class HtlcEvent extends \Google\Protobuf\Internal\Message
{
    /**
     **
     *The short channel id that the incoming htlc arrived at our node on. This
     *value is zero for sends.
     *
     * Generated from protobuf field <code>uint64 incoming_channel_id = 1;</code>
     */
    protected $incoming_channel_id = 0;
    /**
     **
     *The short channel id that the outgoing htlc left our node on. This value
     *is zero for receives.
     *
     * Generated from protobuf field <code>uint64 outgoing_channel_id = 2;</code>
     */
    protected $outgoing_channel_id = 0;
    /**
     **
     *Incoming id is the index of the incoming htlc in the incoming channel.
     *This value is zero for sends.
     *
     * Generated from protobuf field <code>uint64 incoming_htlc_id = 3;</code>
     */
    protected $incoming_htlc_id = 0;
    /**
     **
     *Outgoing id is the index of the outgoing htlc in the outgoing channel.
     *This value is zero for receives.
     *
     * Generated from protobuf field <code>uint64 outgoing_htlc_id = 4;</code>
     */
    protected $outgoing_htlc_id = 0;
    /**
     **
     *The time in unix nanoseconds that the event occurred.
     *
     * Generated from protobuf field <code>uint64 timestamp_ns = 5;</code>
     */
    protected $timestamp_ns = 0;
    /**
     **
     *The event type indicates whether the htlc was part of a send, receive or
     *forward.
     *
     * Generated from protobuf field <code>.routerrpc.HtlcEvent.EventType event_type = 6;</code>
     */
    protected $event_type = 0;
    protected $event;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $incoming_channel_id
     *          *
     *          The short channel id that the incoming htlc arrived at our node on. This
     *          value is zero for sends.
     *     @type int|string $outgoing_channel_id
     *          *
     *          The short channel id that the outgoing htlc left our node on. This value
     *          is zero for receives.
     *     @type int|string $incoming_htlc_id
     *          *
     *          Incoming id is the index of the incoming htlc in the incoming channel.
     *          This value is zero for sends.
     *     @type int|string $outgoing_htlc_id
     *          *
     *          Outgoing id is the index of the outgoing htlc in the outgoing channel.
     *          This value is zero for receives.
     *     @type int|string $timestamp_ns
     *          *
     *          The time in unix nanoseconds that the event occurred.
     *     @type int $event_type
     *          *
     *          The event type indicates whether the htlc was part of a send, receive or
     *          forward.
     *     @type \Routerrpc\ForwardEvent $forward_event
     *     @type \Routerrpc\ForwardFailEvent $forward_fail_event
     *     @type \Routerrpc\SettleEvent $settle_event
     *     @type \Routerrpc\LinkFailEvent $link_fail_event
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Router::initOnce();
        parent::__construct($data);
    }

    /**
     **
     *The short channel id that the incoming htlc arrived at our node on. This
     *value is zero for sends.
     *
     * Generated from protobuf field <code>uint64 incoming_channel_id = 1;</code>
     * @return int|string
     */
    public function getIncomingChannelId()
    {
        return $this->incoming_channel_id;
    }

    /**
     **
     *The short channel id that the incoming htlc arrived at our node on. This
     *value is zero for sends.
     *
     * Generated from protobuf field <code>uint64 incoming_channel_id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setIncomingChannelId($var)
    {
        GPBUtil::checkUint64($var);
        $this->incoming_channel_id = $var;

        return $this;
    }

    /**
     **
     *The short channel id that the outgoing htlc left our node on. This value
     *is zero for receives.
     *
     * Generated from protobuf field <code>uint64 outgoing_channel_id = 2;</code>
     * @return int|string
     */
    public function getOutgoingChannelId()
    {
        return $this->outgoing_channel_id;
    }

    /**
     **
     *The short channel id that the outgoing htlc left our node on. This value
     *is zero for receives.
     *
     * Generated from protobuf field <code>uint64 outgoing_channel_id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setOutgoingChannelId($var)
    {
        GPBUtil::checkUint64($var);
        $this->outgoing_channel_id = $var;

        return $this;
    }

    /**
     **
     *Incoming id is the index of the incoming htlc in the incoming channel.
     *This value is zero for sends.
     *
     * Generated from protobuf field <code>uint64 incoming_htlc_id = 3;</code>
     * @return int|string
     */
    public function getIncomingHtlcId()
    {
        return $this->incoming_htlc_id;
    }

    /**
     **
     *Incoming id is the index of the incoming htlc in the incoming channel.
     *This value is zero for sends.
     *
     * Generated from protobuf field <code>uint64 incoming_htlc_id = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setIncomingHtlcId($var)
    {
        GPBUtil::checkUint64($var);
        $this->incoming_htlc_id = $var;

        return $this;
    }

    /**
     **
     *Outgoing id is the index of the outgoing htlc in the outgoing channel.
     *This value is zero for receives.
     *
     * Generated from protobuf field <code>uint64 outgoing_htlc_id = 4;</code>
     * @return int|string
     */
    public function getOutgoingHtlcId()
    {
        return $this->outgoing_htlc_id;
    }

    /**
     **
     *Outgoing id is the index of the outgoing htlc in the outgoing channel.
     *This value is zero for receives.
     *
     * Generated from protobuf field <code>uint64 outgoing_htlc_id = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setOutgoingHtlcId($var)
    {
        GPBUtil::checkUint64($var);
        $this->outgoing_htlc_id = $var;

        return $this;
    }

    /**
     **
     *The time in unix nanoseconds that the event occurred.
     *
     * Generated from protobuf field <code>uint64 timestamp_ns = 5;</code>
     * @return int|string
     */
    public function getTimestampNs()
    {
        return $this->timestamp_ns;
    }

    /**
     **
     *The time in unix nanoseconds that the event occurred.
     *
     * Generated from protobuf field <code>uint64 timestamp_ns = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestampNs($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp_ns = $var;

        return $this;
    }

    /**
     **
     *The event type indicates whether the htlc was part of a send, receive or
     *forward.
     *
     * Generated from protobuf field <code>.routerrpc.HtlcEvent.EventType event_type = 6;</code>
     * @return int
     */
    public function getEventType()
    {
        return $this->event_type;
    }

    /**
     **
     *The event type indicates whether the htlc was part of a send, receive or
     *forward.
     *
     * Generated from protobuf field <code>.routerrpc.HtlcEvent.EventType event_type = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setEventType($var)
    {
        GPBUtil::checkEnum($var, \Routerrpc\HtlcEvent_EventType::class);
        $this->event_type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.routerrpc.ForwardEvent forward_event = 7;</code>
     * @return \Routerrpc\ForwardEvent
     */
    public function getForwardEvent()
    {
        return $this->readOneof(7);
    }

    /**
     * Generated from protobuf field <code>.routerrpc.ForwardEvent forward_event = 7;</code>
     * @param \Routerrpc\ForwardEvent $var
     * @return $this
     */
    public function setForwardEvent($var)
    {
        GPBUtil::checkMessage($var, \Routerrpc\ForwardEvent::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.routerrpc.ForwardFailEvent forward_fail_event = 8;</code>
     * @return \Routerrpc\ForwardFailEvent
     */
    public function getForwardFailEvent()
    {
        return $this->readOneof(8);
    }

    /**
     * Generated from protobuf field <code>.routerrpc.ForwardFailEvent forward_fail_event = 8;</code>
     * @param \Routerrpc\ForwardFailEvent $var
     * @return $this
     */
    public function setForwardFailEvent($var)
    {
        GPBUtil::checkMessage($var, \Routerrpc\ForwardFailEvent::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.routerrpc.SettleEvent settle_event = 9;</code>
     * @return \Routerrpc\SettleEvent
     */
    public function getSettleEvent()
    {
        return $this->readOneof(9);
    }

    /**
     * Generated from protobuf field <code>.routerrpc.SettleEvent settle_event = 9;</code>
     * @param \Routerrpc\SettleEvent $var
     * @return $this
     */
    public function setSettleEvent($var)
    {
        GPBUtil::checkMessage($var, \Routerrpc\SettleEvent::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.routerrpc.LinkFailEvent link_fail_event = 10;</code>
     * @return \Routerrpc\LinkFailEvent
     */
    public function getLinkFailEvent()
    {
        return $this->readOneof(10);
    }

    /**
     * Generated from protobuf field <code>.routerrpc.LinkFailEvent link_fail_event = 10;</code>
     * @param \Routerrpc\LinkFailEvent $var
     * @return $this
     */
    public function setLinkFailEvent($var)
    {
        GPBUtil::checkMessage($var, \Routerrpc\LinkFailEvent::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getEvent()
    {
        return $this->whichOneof("event");
    }

}

