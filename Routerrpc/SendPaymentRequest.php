<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: router.proto

namespace Routerrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>routerrpc.SendPaymentRequest</code>
 */
class SendPaymentRequest extends \Google\Protobuf\Internal\Message
{
    /**
     *&#47; The identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>bytes dest = 1;</code>
     */
    protected $dest = '';
    /**
     **
     *Number of satoshis to send.
     *The fields amt and amt_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     */
    protected $amt = 0;
    /**
     **
     *Number of millisatoshis to send.
     *The fields amt and amt_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 amt_msat = 12;</code>
     */
    protected $amt_msat = 0;
    /**
     *&#47; The hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>bytes payment_hash = 3;</code>
     */
    protected $payment_hash = '';
    /**
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     */
    protected $final_cltv_delta = 0;
    /**
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient. The amount in the payment request may be zero. In
     *that case it is required to set the amt field as well. If no payment request
     *is specified, the following fields are required: dest, amt and payment_hash.
     *
     * Generated from protobuf field <code>string payment_request = 5;</code>
     */
    protected $payment_request = '';
    /**
     **
     *An upper limit on the amount of time we should spend when attempting to
     *fulfill the payment. This is expressed in seconds. If we cannot make a
     *successful payment within this time frame, an error will be returned.
     *This field must be non-zero.
     *
     * Generated from protobuf field <code>int32 timeout_seconds = 6;</code>
     */
    protected $timeout_seconds = 0;
    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *If this field is left to the default value of 0, only zero-fee routes will
     *be considered. This usually means single hop routes connecting directly to
     *the destination. To send the payment without a fee limit, use max int here.
     *The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 fee_limit_sat = 7;</code>
     */
    protected $fee_limit_sat = 0;
    /**
     **
     *The maximum number of millisatoshis that will be paid as a fee of the
     *payment. If this field is left to the default value of 0, only zero-fee
     *routes will be considered. This usually means single hop routes connecting
     *directly to the destination. To send the payment without a fee limit, use
     *max int here.
     *The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 fee_limit_msat = 13;</code>
     */
    protected $fee_limit_msat = 0;
    /**
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     *
     * Generated from protobuf field <code>uint64 outgoing_chan_id = 8 [jstype = JS_STRING];</code>
     */
    protected $outgoing_chan_id = 0;
    /**
     **
     *The pubkey of the last hop of the route. If empty, any hop may be used.
     *
     * Generated from protobuf field <code>bytes last_hop_pubkey = 14;</code>
     */
    protected $last_hop_pubkey = '';
    /**
     **
     *An optional maximum total time lock for the route. This should not exceed
     *lnd's `--max-cltv-expiry` setting. If zero, then the value of
     *`--max-cltv-expiry` is enforced.
     *
     * Generated from protobuf field <code>int32 cltv_limit = 9;</code>
     */
    protected $cltv_limit = 0;
    /**
     **
     *Optional route hints to reach the destination through private channels.
     *
     * Generated from protobuf field <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private $route_hints;
    /**
     **
     *An optional field that can be used to pass an arbitrary set of TLV records
     *to a peer which understands the new records. This can be used to pass
     *application specific data during the payment attempt. Record types are
     *required to be in the custom range >= 65536. When using REST, the values
     *must be encoded as base64.
     *
     * Generated from protobuf field <code>map<uint64, bytes> dest_custom_records = 11;</code>
     */
    private $dest_custom_records;
    /**
     *&#47; If set, circular payments to self are permitted.
     *
     * Generated from protobuf field <code>bool allow_self_payment = 15;</code>
     */
    protected $allow_self_payment = false;
    /**
     **
     *Features assumed to be supported by the final node. All transitive feature
     *dependencies must also be set properly. For a given feature bit pair, either
     *optional or remote may be set, but not both. If this field is nil or empty,
     *the router will try to load destination features from the graph as a
     *fallback.
     *
     * Generated from protobuf field <code>repeated .lnrpc.FeatureBit dest_features = 16;</code>
     */
    private $dest_features;
    /**
     **
     *The maximum number of partial payments that may be use to complete the full
     *amount.
     *
     * Generated from protobuf field <code>uint32 max_parts = 17;</code>
     */
    protected $max_parts = 0;
    /**
     **
     *If set, only the final payment update is streamed back. Intermediate updates
     *that show which htlcs are still in flight are suppressed.
     *
     * Generated from protobuf field <code>bool no_inflight_updates = 18;</code>
     */
    protected $no_inflight_updates = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dest
     *          &#47; The identity pubkey of the payment recipient
     *     @type int|string $amt
     *          *
     *          Number of satoshis to send.
     *          The fields amt and amt_msat are mutually exclusive.
     *     @type int|string $amt_msat
     *          *
     *          Number of millisatoshis to send.
     *          The fields amt and amt_msat are mutually exclusive.
     *     @type string $payment_hash
     *          &#47; The hash to use within the payment's HTLC
     *     @type int $final_cltv_delta
     *          *
     *          The CLTV delta from the current height that should be used to set the
     *          timelock for the final hop.
     *     @type string $payment_request
     *          *
     *          A bare-bones invoice for a payment within the Lightning Network.  With the
     *          details of the invoice, the sender has all the data necessary to send a
     *          payment to the recipient. The amount in the payment request may be zero. In
     *          that case it is required to set the amt field as well. If no payment request
     *          is specified, the following fields are required: dest, amt and payment_hash.
     *     @type int $timeout_seconds
     *          *
     *          An upper limit on the amount of time we should spend when attempting to
     *          fulfill the payment. This is expressed in seconds. If we cannot make a
     *          successful payment within this time frame, an error will be returned.
     *          This field must be non-zero.
     *     @type int|string $fee_limit_sat
     *          *
     *          The maximum number of satoshis that will be paid as a fee of the payment.
     *          If this field is left to the default value of 0, only zero-fee routes will
     *          be considered. This usually means single hop routes connecting directly to
     *          the destination. To send the payment without a fee limit, use max int here.
     *          The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *     @type int|string $fee_limit_msat
     *          *
     *          The maximum number of millisatoshis that will be paid as a fee of the
     *          payment. If this field is left to the default value of 0, only zero-fee
     *          routes will be considered. This usually means single hop routes connecting
     *          directly to the destination. To send the payment without a fee limit, use
     *          max int here.
     *          The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *     @type int|string $outgoing_chan_id
     *          *
     *          The channel id of the channel that must be taken to the first hop. If zero,
     *          any channel may be used.
     *     @type string $last_hop_pubkey
     *          *
     *          The pubkey of the last hop of the route. If empty, any hop may be used.
     *     @type int $cltv_limit
     *          *
     *          An optional maximum total time lock for the route. This should not exceed
     *          lnd's `--max-cltv-expiry` setting. If zero, then the value of
     *          `--max-cltv-expiry` is enforced.
     *     @type \Lnrpc\RouteHint[]|\Google\Protobuf\Internal\RepeatedField $route_hints
     *          *
     *          Optional route hints to reach the destination through private channels.
     *     @type array|\Google\Protobuf\Internal\MapField $dest_custom_records
     *          *
     *          An optional field that can be used to pass an arbitrary set of TLV records
     *          to a peer which understands the new records. This can be used to pass
     *          application specific data during the payment attempt. Record types are
     *          required to be in the custom range >= 65536. When using REST, the values
     *          must be encoded as base64.
     *     @type bool $allow_self_payment
     *          &#47; If set, circular payments to self are permitted.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $dest_features
     *          *
     *          Features assumed to be supported by the final node. All transitive feature
     *          dependencies must also be set properly. For a given feature bit pair, either
     *          optional or remote may be set, but not both. If this field is nil or empty,
     *          the router will try to load destination features from the graph as a
     *          fallback.
     *     @type int $max_parts
     *          *
     *          The maximum number of partial payments that may be use to complete the full
     *          amount.
     *     @type bool $no_inflight_updates
     *          *
     *          If set, only the final payment update is streamed back. Intermediate updates
     *          that show which htlcs are still in flight are suppressed.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Router::initOnce();
        parent::__construct($data);
    }

    /**
     *&#47; The identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>bytes dest = 1;</code>
     * @return string
     */
    public function getDest()
    {
        return $this->dest;
    }

    /**
     *&#47; The identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>bytes dest = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDest($var)
    {
        GPBUtil::checkString($var, False);
        $this->dest = $var;

        return $this;
    }

    /**
     **
     *Number of satoshis to send.
     *The fields amt and amt_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     * @return int|string
     */
    public function getAmt()
    {
        return $this->amt;
    }

    /**
     **
     *Number of satoshis to send.
     *The fields amt and amt_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmt($var)
    {
        GPBUtil::checkInt64($var);
        $this->amt = $var;

        return $this;
    }

    /**
     **
     *Number of millisatoshis to send.
     *The fields amt and amt_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 amt_msat = 12;</code>
     * @return int|string
     */
    public function getAmtMsat()
    {
        return $this->amt_msat;
    }

    /**
     **
     *Number of millisatoshis to send.
     *The fields amt and amt_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 amt_msat = 12;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmtMsat($var)
    {
        GPBUtil::checkInt64($var);
        $this->amt_msat = $var;

        return $this;
    }

    /**
     *&#47; The hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>bytes payment_hash = 3;</code>
     * @return string
     */
    public function getPaymentHash()
    {
        return $this->payment_hash;
    }

    /**
     *&#47; The hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>bytes payment_hash = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setPaymentHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->payment_hash = $var;

        return $this;
    }

    /**
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     * @return int
     */
    public function getFinalCltvDelta()
    {
        return $this->final_cltv_delta;
    }

    /**
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setFinalCltvDelta($var)
    {
        GPBUtil::checkInt32($var);
        $this->final_cltv_delta = $var;

        return $this;
    }

    /**
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient. The amount in the payment request may be zero. In
     *that case it is required to set the amt field as well. If no payment request
     *is specified, the following fields are required: dest, amt and payment_hash.
     *
     * Generated from protobuf field <code>string payment_request = 5;</code>
     * @return string
     */
    public function getPaymentRequest()
    {
        return $this->payment_request;
    }

    /**
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient. The amount in the payment request may be zero. In
     *that case it is required to set the amt field as well. If no payment request
     *is specified, the following fields are required: dest, amt and payment_hash.
     *
     * Generated from protobuf field <code>string payment_request = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setPaymentRequest($var)
    {
        GPBUtil::checkString($var, True);
        $this->payment_request = $var;

        return $this;
    }

    /**
     **
     *An upper limit on the amount of time we should spend when attempting to
     *fulfill the payment. This is expressed in seconds. If we cannot make a
     *successful payment within this time frame, an error will be returned.
     *This field must be non-zero.
     *
     * Generated from protobuf field <code>int32 timeout_seconds = 6;</code>
     * @return int
     */
    public function getTimeoutSeconds()
    {
        return $this->timeout_seconds;
    }

    /**
     **
     *An upper limit on the amount of time we should spend when attempting to
     *fulfill the payment. This is expressed in seconds. If we cannot make a
     *successful payment within this time frame, an error will be returned.
     *This field must be non-zero.
     *
     * Generated from protobuf field <code>int32 timeout_seconds = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeoutSeconds($var)
    {
        GPBUtil::checkInt32($var);
        $this->timeout_seconds = $var;

        return $this;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *If this field is left to the default value of 0, only zero-fee routes will
     *be considered. This usually means single hop routes connecting directly to
     *the destination. To send the payment without a fee limit, use max int here.
     *The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 fee_limit_sat = 7;</code>
     * @return int|string
     */
    public function getFeeLimitSat()
    {
        return $this->fee_limit_sat;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *If this field is left to the default value of 0, only zero-fee routes will
     *be considered. This usually means single hop routes connecting directly to
     *the destination. To send the payment without a fee limit, use max int here.
     *The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 fee_limit_sat = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFeeLimitSat($var)
    {
        GPBUtil::checkInt64($var);
        $this->fee_limit_sat = $var;

        return $this;
    }

    /**
     **
     *The maximum number of millisatoshis that will be paid as a fee of the
     *payment. If this field is left to the default value of 0, only zero-fee
     *routes will be considered. This usually means single hop routes connecting
     *directly to the destination. To send the payment without a fee limit, use
     *max int here.
     *The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 fee_limit_msat = 13;</code>
     * @return int|string
     */
    public function getFeeLimitMsat()
    {
        return $this->fee_limit_msat;
    }

    /**
     **
     *The maximum number of millisatoshis that will be paid as a fee of the
     *payment. If this field is left to the default value of 0, only zero-fee
     *routes will be considered. This usually means single hop routes connecting
     *directly to the destination. To send the payment without a fee limit, use
     *max int here.
     *The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
     *
     * Generated from protobuf field <code>int64 fee_limit_msat = 13;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFeeLimitMsat($var)
    {
        GPBUtil::checkInt64($var);
        $this->fee_limit_msat = $var;

        return $this;
    }

    /**
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     *
     * Generated from protobuf field <code>uint64 outgoing_chan_id = 8 [jstype = JS_STRING];</code>
     * @return int|string
     */
    public function getOutgoingChanId()
    {
        return $this->outgoing_chan_id;
    }

    /**
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     *
     * Generated from protobuf field <code>uint64 outgoing_chan_id = 8 [jstype = JS_STRING];</code>
     * @param int|string $var
     * @return $this
     */
    public function setOutgoingChanId($var)
    {
        GPBUtil::checkUint64($var);
        $this->outgoing_chan_id = $var;

        return $this;
    }

    /**
     **
     *The pubkey of the last hop of the route. If empty, any hop may be used.
     *
     * Generated from protobuf field <code>bytes last_hop_pubkey = 14;</code>
     * @return string
     */
    public function getLastHopPubkey()
    {
        return $this->last_hop_pubkey;
    }

    /**
     **
     *The pubkey of the last hop of the route. If empty, any hop may be used.
     *
     * Generated from protobuf field <code>bytes last_hop_pubkey = 14;</code>
     * @param string $var
     * @return $this
     */
    public function setLastHopPubkey($var)
    {
        GPBUtil::checkString($var, False);
        $this->last_hop_pubkey = $var;

        return $this;
    }

    /**
     **
     *An optional maximum total time lock for the route. This should not exceed
     *lnd's `--max-cltv-expiry` setting. If zero, then the value of
     *`--max-cltv-expiry` is enforced.
     *
     * Generated from protobuf field <code>int32 cltv_limit = 9;</code>
     * @return int
     */
    public function getCltvLimit()
    {
        return $this->cltv_limit;
    }

    /**
     **
     *An optional maximum total time lock for the route. This should not exceed
     *lnd's `--max-cltv-expiry` setting. If zero, then the value of
     *`--max-cltv-expiry` is enforced.
     *
     * Generated from protobuf field <code>int32 cltv_limit = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setCltvLimit($var)
    {
        GPBUtil::checkInt32($var);
        $this->cltv_limit = $var;

        return $this;
    }

    /**
     **
     *Optional route hints to reach the destination through private channels.
     *
     * Generated from protobuf field <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getRouteHints()
    {
        return $this->route_hints;
    }

    /**
     **
     *Optional route hints to reach the destination through private channels.
     *
     * Generated from protobuf field <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     * @param \Lnrpc\RouteHint[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setRouteHints($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Lnrpc\RouteHint::class);
        $this->route_hints = $arr;

        return $this;
    }

    /**
     **
     *An optional field that can be used to pass an arbitrary set of TLV records
     *to a peer which understands the new records. This can be used to pass
     *application specific data during the payment attempt. Record types are
     *required to be in the custom range >= 65536. When using REST, the values
     *must be encoded as base64.
     *
     * Generated from protobuf field <code>map<uint64, bytes> dest_custom_records = 11;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getDestCustomRecords()
    {
        return $this->dest_custom_records;
    }

    /**
     **
     *An optional field that can be used to pass an arbitrary set of TLV records
     *to a peer which understands the new records. This can be used to pass
     *application specific data during the payment attempt. Record types are
     *required to be in the custom range >= 65536. When using REST, the values
     *must be encoded as base64.
     *
     * Generated from protobuf field <code>map<uint64, bytes> dest_custom_records = 11;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setDestCustomRecords($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT64, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->dest_custom_records = $arr;

        return $this;
    }

    /**
     *&#47; If set, circular payments to self are permitted.
     *
     * Generated from protobuf field <code>bool allow_self_payment = 15;</code>
     * @return bool
     */
    public function getAllowSelfPayment()
    {
        return $this->allow_self_payment;
    }

    /**
     *&#47; If set, circular payments to self are permitted.
     *
     * Generated from protobuf field <code>bool allow_self_payment = 15;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowSelfPayment($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_self_payment = $var;

        return $this;
    }

    /**
     **
     *Features assumed to be supported by the final node. All transitive feature
     *dependencies must also be set properly. For a given feature bit pair, either
     *optional or remote may be set, but not both. If this field is nil or empty,
     *the router will try to load destination features from the graph as a
     *fallback.
     *
     * Generated from protobuf field <code>repeated .lnrpc.FeatureBit dest_features = 16;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDestFeatures()
    {
        return $this->dest_features;
    }

    /**
     **
     *Features assumed to be supported by the final node. All transitive feature
     *dependencies must also be set properly. For a given feature bit pair, either
     *optional or remote may be set, but not both. If this field is nil or empty,
     *the router will try to load destination features from the graph as a
     *fallback.
     *
     * Generated from protobuf field <code>repeated .lnrpc.FeatureBit dest_features = 16;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDestFeatures($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::ENUM, \Lnrpc\FeatureBit::class);
        $this->dest_features = $arr;

        return $this;
    }

    /**
     **
     *The maximum number of partial payments that may be use to complete the full
     *amount.
     *
     * Generated from protobuf field <code>uint32 max_parts = 17;</code>
     * @return int
     */
    public function getMaxParts()
    {
        return $this->max_parts;
    }

    /**
     **
     *The maximum number of partial payments that may be use to complete the full
     *amount.
     *
     * Generated from protobuf field <code>uint32 max_parts = 17;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxParts($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_parts = $var;

        return $this;
    }

    /**
     **
     *If set, only the final payment update is streamed back. Intermediate updates
     *that show which htlcs are still in flight are suppressed.
     *
     * Generated from protobuf field <code>bool no_inflight_updates = 18;</code>
     * @return bool
     */
    public function getNoInflightUpdates()
    {
        return $this->no_inflight_updates;
    }

    /**
     **
     *If set, only the final payment update is streamed back. Intermediate updates
     *that show which htlcs are still in flight are suppressed.
     *
     * Generated from protobuf field <code>bool no_inflight_updates = 18;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoInflightUpdates($var)
    {
        GPBUtil::checkBool($var);
        $this->no_inflight_updates = $var;

        return $this;
    }

}

