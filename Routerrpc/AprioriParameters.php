<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: router.proto

namespace Routerrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>routerrpc.AprioriParameters</code>
 */
class AprioriParameters extends \Google\Protobuf\Internal\Message
{
    /**
     *The amount of time mission control will take to restore a penalized node
     *or channel back to 50% success probability, expressed in seconds. Setting
     *this value to a higher value will penalize failures for longer, making
     *mission control less likely to route through nodes and channels that we
     *have previously recorded failures for.
     *
     * Generated from protobuf field <code>uint64 half_life_seconds = 1;</code>
     */
    protected $half_life_seconds = 0;
    /**
     *The probability of success mission control should assign to hop in a route
     *where it has no other information available. Higher values will make mission
     *control more willing to try hops that we have no information about, lower
     *values will discourage trying these hops.
     *
     * Generated from protobuf field <code>double hop_probability = 2;</code>
     */
    protected $hop_probability = 0.0;
    /**
     *The importance that mission control should place on historical results,
     *expressed as a value in [0;1]. Setting this value to 1 will ignore all
     *historical payments and just use the hop probability to assess the
     *probability of success for each hop. A zero value ignores hop probability
     *completely and relies entirely on historical results, unless none are
     *available.
     *
     * Generated from protobuf field <code>double weight = 3;</code>
     */
    protected $weight = 0.0;
    /**
     *The fraction of a channel's capacity that we consider to have liquidity. For
     *amounts that come close to or exceed the fraction, an additional penalty is
     *applied. A value of 1.0 disables the capacity factor. Allowed values are in
     *[0.75, 1.0].
     *
     * Generated from protobuf field <code>double capacity_fraction = 4;</code>
     */
    protected $capacity_fraction = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $half_life_seconds
     *          The amount of time mission control will take to restore a penalized node
     *          or channel back to 50% success probability, expressed in seconds. Setting
     *          this value to a higher value will penalize failures for longer, making
     *          mission control less likely to route through nodes and channels that we
     *          have previously recorded failures for.
     *     @type float $hop_probability
     *          The probability of success mission control should assign to hop in a route
     *          where it has no other information available. Higher values will make mission
     *          control more willing to try hops that we have no information about, lower
     *          values will discourage trying these hops.
     *     @type float $weight
     *          The importance that mission control should place on historical results,
     *          expressed as a value in [0;1]. Setting this value to 1 will ignore all
     *          historical payments and just use the hop probability to assess the
     *          probability of success for each hop. A zero value ignores hop probability
     *          completely and relies entirely on historical results, unless none are
     *          available.
     *     @type float $capacity_fraction
     *          The fraction of a channel's capacity that we consider to have liquidity. For
     *          amounts that come close to or exceed the fraction, an additional penalty is
     *          applied. A value of 1.0 disables the capacity factor. Allowed values are in
     *          [0.75, 1.0].
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Router::initOnce();
        parent::__construct($data);
    }

    /**
     *The amount of time mission control will take to restore a penalized node
     *or channel back to 50% success probability, expressed in seconds. Setting
     *this value to a higher value will penalize failures for longer, making
     *mission control less likely to route through nodes and channels that we
     *have previously recorded failures for.
     *
     * Generated from protobuf field <code>uint64 half_life_seconds = 1;</code>
     * @return int|string
     */
    public function getHalfLifeSeconds()
    {
        return $this->half_life_seconds;
    }

    /**
     *The amount of time mission control will take to restore a penalized node
     *or channel back to 50% success probability, expressed in seconds. Setting
     *this value to a higher value will penalize failures for longer, making
     *mission control less likely to route through nodes and channels that we
     *have previously recorded failures for.
     *
     * Generated from protobuf field <code>uint64 half_life_seconds = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setHalfLifeSeconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->half_life_seconds = $var;

        return $this;
    }

    /**
     *The probability of success mission control should assign to hop in a route
     *where it has no other information available. Higher values will make mission
     *control more willing to try hops that we have no information about, lower
     *values will discourage trying these hops.
     *
     * Generated from protobuf field <code>double hop_probability = 2;</code>
     * @return float
     */
    public function getHopProbability()
    {
        return $this->hop_probability;
    }

    /**
     *The probability of success mission control should assign to hop in a route
     *where it has no other information available. Higher values will make mission
     *control more willing to try hops that we have no information about, lower
     *values will discourage trying these hops.
     *
     * Generated from protobuf field <code>double hop_probability = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setHopProbability($var)
    {
        GPBUtil::checkDouble($var);
        $this->hop_probability = $var;

        return $this;
    }

    /**
     *The importance that mission control should place on historical results,
     *expressed as a value in [0;1]. Setting this value to 1 will ignore all
     *historical payments and just use the hop probability to assess the
     *probability of success for each hop. A zero value ignores hop probability
     *completely and relies entirely on historical results, unless none are
     *available.
     *
     * Generated from protobuf field <code>double weight = 3;</code>
     * @return float
     */
    public function getWeight()
    {
        return $this->weight;
    }

    /**
     *The importance that mission control should place on historical results,
     *expressed as a value in [0;1]. Setting this value to 1 will ignore all
     *historical payments and just use the hop probability to assess the
     *probability of success for each hop. A zero value ignores hop probability
     *completely and relies entirely on historical results, unless none are
     *available.
     *
     * Generated from protobuf field <code>double weight = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setWeight($var)
    {
        GPBUtil::checkDouble($var);
        $this->weight = $var;

        return $this;
    }

    /**
     *The fraction of a channel's capacity that we consider to have liquidity. For
     *amounts that come close to or exceed the fraction, an additional penalty is
     *applied. A value of 1.0 disables the capacity factor. Allowed values are in
     *[0.75, 1.0].
     *
     * Generated from protobuf field <code>double capacity_fraction = 4;</code>
     * @return float
     */
    public function getCapacityFraction()
    {
        return $this->capacity_fraction;
    }

    /**
     *The fraction of a channel's capacity that we consider to have liquidity. For
     *amounts that come close to or exceed the fraction, an additional penalty is
     *applied. A value of 1.0 disables the capacity factor. Allowed values are in
     *[0.75, 1.0].
     *
     * Generated from protobuf field <code>double capacity_fraction = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setCapacityFraction($var)
    {
        GPBUtil::checkDouble($var);
        $this->capacity_fraction = $var;

        return $this;
    }

}

