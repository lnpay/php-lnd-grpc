<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: signer.proto

namespace Signrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>signrpc.MuSig2SessionResponse</code>
 */
class MuSig2SessionResponse extends \Google\Protobuf\Internal\Message
{
    /**
     *The unique ID that represents this signing session. A session can be used
     *for producing a signature a single time. If the signing fails for any
     *reason, a new session with the same participants needs to be created.
     *
     * Generated from protobuf field <code>bytes session_id = 1;</code>
     */
    protected $session_id = '';
    /**
     *The combined public key (in the 32-byte x-only format) with all tweaks
     *applied to it. If a taproot tweak is specified, this corresponds to the
     *taproot key that can be put into the on-chain output.
     *
     * Generated from protobuf field <code>bytes combined_key = 2;</code>
     */
    protected $combined_key = '';
    /**
     *The raw combined public key (in the 32-byte x-only format) before any tweaks
     *are applied to it. If a taproot tweak is specified, this corresponds to the
     *internal key that needs to be put into the witness if the script spend path
     *is used.
     *
     * Generated from protobuf field <code>bytes taproot_internal_key = 3;</code>
     */
    protected $taproot_internal_key = '';
    /**
     *The two public nonces the local signer uses, combined into a single value
     *of 66 bytes. Can be split into the two 33-byte points to get the individual
     *nonces.
     *
     * Generated from protobuf field <code>bytes local_public_nonces = 4;</code>
     */
    protected $local_public_nonces = '';
    /**
     *Indicates whether all nonces required to start the signing process are known
     *now.
     *
     * Generated from protobuf field <code>bool have_all_nonces = 5;</code>
     */
    protected $have_all_nonces = false;
    /**
     *The version of the MuSig2 BIP that was used to create the session.
     *
     * Generated from protobuf field <code>.signrpc.MuSig2Version version = 6;</code>
     */
    protected $version = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $session_id
     *          The unique ID that represents this signing session. A session can be used
     *          for producing a signature a single time. If the signing fails for any
     *          reason, a new session with the same participants needs to be created.
     *     @type string $combined_key
     *          The combined public key (in the 32-byte x-only format) with all tweaks
     *          applied to it. If a taproot tweak is specified, this corresponds to the
     *          taproot key that can be put into the on-chain output.
     *     @type string $taproot_internal_key
     *          The raw combined public key (in the 32-byte x-only format) before any tweaks
     *          are applied to it. If a taproot tweak is specified, this corresponds to the
     *          internal key that needs to be put into the witness if the script spend path
     *          is used.
     *     @type string $local_public_nonces
     *          The two public nonces the local signer uses, combined into a single value
     *          of 66 bytes. Can be split into the two 33-byte points to get the individual
     *          nonces.
     *     @type bool $have_all_nonces
     *          Indicates whether all nonces required to start the signing process are known
     *          now.
     *     @type int $version
     *          The version of the MuSig2 BIP that was used to create the session.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Signer::initOnce();
        parent::__construct($data);
    }

    /**
     *The unique ID that represents this signing session. A session can be used
     *for producing a signature a single time. If the signing fails for any
     *reason, a new session with the same participants needs to be created.
     *
     * Generated from protobuf field <code>bytes session_id = 1;</code>
     * @return string
     */
    public function getSessionId()
    {
        return $this->session_id;
    }

    /**
     *The unique ID that represents this signing session. A session can be used
     *for producing a signature a single time. If the signing fails for any
     *reason, a new session with the same participants needs to be created.
     *
     * Generated from protobuf field <code>bytes session_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSessionId($var)
    {
        GPBUtil::checkString($var, False);
        $this->session_id = $var;

        return $this;
    }

    /**
     *The combined public key (in the 32-byte x-only format) with all tweaks
     *applied to it. If a taproot tweak is specified, this corresponds to the
     *taproot key that can be put into the on-chain output.
     *
     * Generated from protobuf field <code>bytes combined_key = 2;</code>
     * @return string
     */
    public function getCombinedKey()
    {
        return $this->combined_key;
    }

    /**
     *The combined public key (in the 32-byte x-only format) with all tweaks
     *applied to it. If a taproot tweak is specified, this corresponds to the
     *taproot key that can be put into the on-chain output.
     *
     * Generated from protobuf field <code>bytes combined_key = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCombinedKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->combined_key = $var;

        return $this;
    }

    /**
     *The raw combined public key (in the 32-byte x-only format) before any tweaks
     *are applied to it. If a taproot tweak is specified, this corresponds to the
     *internal key that needs to be put into the witness if the script spend path
     *is used.
     *
     * Generated from protobuf field <code>bytes taproot_internal_key = 3;</code>
     * @return string
     */
    public function getTaprootInternalKey()
    {
        return $this->taproot_internal_key;
    }

    /**
     *The raw combined public key (in the 32-byte x-only format) before any tweaks
     *are applied to it. If a taproot tweak is specified, this corresponds to the
     *internal key that needs to be put into the witness if the script spend path
     *is used.
     *
     * Generated from protobuf field <code>bytes taproot_internal_key = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setTaprootInternalKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->taproot_internal_key = $var;

        return $this;
    }

    /**
     *The two public nonces the local signer uses, combined into a single value
     *of 66 bytes. Can be split into the two 33-byte points to get the individual
     *nonces.
     *
     * Generated from protobuf field <code>bytes local_public_nonces = 4;</code>
     * @return string
     */
    public function getLocalPublicNonces()
    {
        return $this->local_public_nonces;
    }

    /**
     *The two public nonces the local signer uses, combined into a single value
     *of 66 bytes. Can be split into the two 33-byte points to get the individual
     *nonces.
     *
     * Generated from protobuf field <code>bytes local_public_nonces = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setLocalPublicNonces($var)
    {
        GPBUtil::checkString($var, False);
        $this->local_public_nonces = $var;

        return $this;
    }

    /**
     *Indicates whether all nonces required to start the signing process are known
     *now.
     *
     * Generated from protobuf field <code>bool have_all_nonces = 5;</code>
     * @return bool
     */
    public function getHaveAllNonces()
    {
        return $this->have_all_nonces;
    }

    /**
     *Indicates whether all nonces required to start the signing process are known
     *now.
     *
     * Generated from protobuf field <code>bool have_all_nonces = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setHaveAllNonces($var)
    {
        GPBUtil::checkBool($var);
        $this->have_all_nonces = $var;

        return $this;
    }

    /**
     *The version of the MuSig2 BIP that was used to create the session.
     *
     * Generated from protobuf field <code>.signrpc.MuSig2Version version = 6;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     *The version of the MuSig2 BIP that was used to create the session.
     *
     * Generated from protobuf field <code>.signrpc.MuSig2Version version = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkEnum($var, \Signrpc\MuSig2Version::class);
        $this->version = $var;

        return $this;
    }

}

