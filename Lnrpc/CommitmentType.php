<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: lightning.proto

namespace Lnrpc;

use UnexpectedValueException;

/**
 * Protobuf type <code>lnrpc.CommitmentType</code>
 */
class CommitmentType
{
    /**
     *Returned when the commitment type isn't known or unavailable.
     *
     * Generated from protobuf enum <code>UNKNOWN_COMMITMENT_TYPE = 0;</code>
     */
    const UNKNOWN_COMMITMENT_TYPE = 0;
    /**
     *A channel using the legacy commitment format having tweaked to_remote
     *keys.
     *
     * Generated from protobuf enum <code>LEGACY = 1;</code>
     */
    const LEGACY = 1;
    /**
     *A channel that uses the modern commitment format where the key in the
     *output of the remote party does not change each state. This makes back
     *up and recovery easier as when the channel is closed, the funds go
     *directly to that key.
     *
     * Generated from protobuf enum <code>STATIC_REMOTE_KEY = 2;</code>
     */
    const STATIC_REMOTE_KEY = 2;
    /**
     *A channel that uses a commitment format that has anchor outputs on the
     *commitments, allowing fee bumping after a force close transaction has
     *been broadcast.
     *
     * Generated from protobuf enum <code>ANCHORS = 3;</code>
     */
    const ANCHORS = 3;
    /**
     *A channel that uses a commitment type that builds upon the anchors
     *commitment format, but in addition requires a CLTV clause to spend outputs
     *paying to the channel initiator. This is intended for use on leased channels
     *to guarantee that the channel initiator has no incentives to close a leased
     *channel before its maturity date.
     *
     * Generated from protobuf enum <code>SCRIPT_ENFORCED_LEASE = 4;</code>
     */
    const SCRIPT_ENFORCED_LEASE = 4;

    private static $valueToName = [
        self::UNKNOWN_COMMITMENT_TYPE => 'UNKNOWN_COMMITMENT_TYPE',
        self::LEGACY => 'LEGACY',
        self::STATIC_REMOTE_KEY => 'STATIC_REMOTE_KEY',
        self::ANCHORS => 'ANCHORS',
        self::SCRIPT_ENFORCED_LEASE => 'SCRIPT_ENFORCED_LEASE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

