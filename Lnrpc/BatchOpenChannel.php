<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: lightning.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.BatchOpenChannel</code>
 */
class BatchOpenChannel extends \Google\Protobuf\Internal\Message
{
    /**
     * The pubkey of the node to open a channel with. When using REST, this
     * field must be encoded as base64.
     *
     * Generated from protobuf field <code>bytes node_pubkey = 1;</code>
     */
    protected $node_pubkey = '';
    /**
     * The number of satoshis the wallet should commit to the channel.
     *
     * Generated from protobuf field <code>int64 local_funding_amount = 2;</code>
     */
    protected $local_funding_amount = 0;
    /**
     * The number of satoshis to push to the remote side as part of the initial
     * commitment state.
     *
     * Generated from protobuf field <code>int64 push_sat = 3;</code>
     */
    protected $push_sat = 0;
    /**
     * Whether this channel should be private, not announced to the greater
     * network.
     *
     * Generated from protobuf field <code>bool private = 4;</code>
     */
    protected $private = false;
    /**
     * The minimum value in millisatoshi we will require for incoming HTLCs on
     * the channel.
     *
     * Generated from protobuf field <code>int64 min_htlc_msat = 5;</code>
     */
    protected $min_htlc_msat = 0;
    /**
     * The delay we require on the remote's commitment transaction. If this is
     * not set, it will be scaled automatically with the channel size.
     *
     * Generated from protobuf field <code>uint32 remote_csv_delay = 6;</code>
     */
    protected $remote_csv_delay = 0;
    /**
     *Close address is an optional address which specifies the address to which
     *funds should be paid out to upon cooperative close. This field may only be
     *set if the peer supports the option upfront feature bit (call listpeers
     *to check). The remote peer will only accept cooperative closes to this
     *address if it is set.
     *Note: If this value is set on channel creation, you will *not* be able to
     *cooperatively close out to a different address.
     *
     * Generated from protobuf field <code>string close_address = 7;</code>
     */
    protected $close_address = '';
    /**
     *An optional, unique identifier of 32 random bytes that will be used as the
     *pending channel ID to identify the channel while it is in the pre-pending
     *state.
     *
     * Generated from protobuf field <code>bytes pending_chan_id = 8;</code>
     */
    protected $pending_chan_id = '';
    /**
     *The explicit commitment type to use. Note this field will only be used if
     *the remote peer supports explicit channel negotiation.
     *
     * Generated from protobuf field <code>.lnrpc.CommitmentType commitment_type = 9;</code>
     */
    protected $commitment_type = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $node_pubkey
     *           The pubkey of the node to open a channel with. When using REST, this
     *           field must be encoded as base64.
     *     @type int|string $local_funding_amount
     *           The number of satoshis the wallet should commit to the channel.
     *     @type int|string $push_sat
     *           The number of satoshis to push to the remote side as part of the initial
     *           commitment state.
     *     @type bool $private
     *           Whether this channel should be private, not announced to the greater
     *           network.
     *     @type int|string $min_htlc_msat
     *           The minimum value in millisatoshi we will require for incoming HTLCs on
     *           the channel.
     *     @type int $remote_csv_delay
     *           The delay we require on the remote's commitment transaction. If this is
     *           not set, it will be scaled automatically with the channel size.
     *     @type string $close_address
     *          Close address is an optional address which specifies the address to which
     *          funds should be paid out to upon cooperative close. This field may only be
     *          set if the peer supports the option upfront feature bit (call listpeers
     *          to check). The remote peer will only accept cooperative closes to this
     *          address if it is set.
     *          Note: If this value is set on channel creation, you will *not* be able to
     *          cooperatively close out to a different address.
     *     @type string $pending_chan_id
     *          An optional, unique identifier of 32 random bytes that will be used as the
     *          pending channel ID to identify the channel while it is in the pre-pending
     *          state.
     *     @type int $commitment_type
     *          The explicit commitment type to use. Note this field will only be used if
     *          the remote peer supports explicit channel negotiation.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Lightning::initOnce();
        parent::__construct($data);
    }

    /**
     * The pubkey of the node to open a channel with. When using REST, this
     * field must be encoded as base64.
     *
     * Generated from protobuf field <code>bytes node_pubkey = 1;</code>
     * @return string
     */
    public function getNodePubkey()
    {
        return $this->node_pubkey;
    }

    /**
     * The pubkey of the node to open a channel with. When using REST, this
     * field must be encoded as base64.
     *
     * Generated from protobuf field <code>bytes node_pubkey = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setNodePubkey($var)
    {
        GPBUtil::checkString($var, False);
        $this->node_pubkey = $var;

        return $this;
    }

    /**
     * The number of satoshis the wallet should commit to the channel.
     *
     * Generated from protobuf field <code>int64 local_funding_amount = 2;</code>
     * @return int|string
     */
    public function getLocalFundingAmount()
    {
        return $this->local_funding_amount;
    }

    /**
     * The number of satoshis the wallet should commit to the channel.
     *
     * Generated from protobuf field <code>int64 local_funding_amount = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLocalFundingAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->local_funding_amount = $var;

        return $this;
    }

    /**
     * The number of satoshis to push to the remote side as part of the initial
     * commitment state.
     *
     * Generated from protobuf field <code>int64 push_sat = 3;</code>
     * @return int|string
     */
    public function getPushSat()
    {
        return $this->push_sat;
    }

    /**
     * The number of satoshis to push to the remote side as part of the initial
     * commitment state.
     *
     * Generated from protobuf field <code>int64 push_sat = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPushSat($var)
    {
        GPBUtil::checkInt64($var);
        $this->push_sat = $var;

        return $this;
    }

    /**
     * Whether this channel should be private, not announced to the greater
     * network.
     *
     * Generated from protobuf field <code>bool private = 4;</code>
     * @return bool
     */
    public function getPrivate()
    {
        return $this->private;
    }

    /**
     * Whether this channel should be private, not announced to the greater
     * network.
     *
     * Generated from protobuf field <code>bool private = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setPrivate($var)
    {
        GPBUtil::checkBool($var);
        $this->private = $var;

        return $this;
    }

    /**
     * The minimum value in millisatoshi we will require for incoming HTLCs on
     * the channel.
     *
     * Generated from protobuf field <code>int64 min_htlc_msat = 5;</code>
     * @return int|string
     */
    public function getMinHtlcMsat()
    {
        return $this->min_htlc_msat;
    }

    /**
     * The minimum value in millisatoshi we will require for incoming HTLCs on
     * the channel.
     *
     * Generated from protobuf field <code>int64 min_htlc_msat = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinHtlcMsat($var)
    {
        GPBUtil::checkInt64($var);
        $this->min_htlc_msat = $var;

        return $this;
    }

    /**
     * The delay we require on the remote's commitment transaction. If this is
     * not set, it will be scaled automatically with the channel size.
     *
     * Generated from protobuf field <code>uint32 remote_csv_delay = 6;</code>
     * @return int
     */
    public function getRemoteCsvDelay()
    {
        return $this->remote_csv_delay;
    }

    /**
     * The delay we require on the remote's commitment transaction. If this is
     * not set, it will be scaled automatically with the channel size.
     *
     * Generated from protobuf field <code>uint32 remote_csv_delay = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setRemoteCsvDelay($var)
    {
        GPBUtil::checkUint32($var);
        $this->remote_csv_delay = $var;

        return $this;
    }

    /**
     *Close address is an optional address which specifies the address to which
     *funds should be paid out to upon cooperative close. This field may only be
     *set if the peer supports the option upfront feature bit (call listpeers
     *to check). The remote peer will only accept cooperative closes to this
     *address if it is set.
     *Note: If this value is set on channel creation, you will *not* be able to
     *cooperatively close out to a different address.
     *
     * Generated from protobuf field <code>string close_address = 7;</code>
     * @return string
     */
    public function getCloseAddress()
    {
        return $this->close_address;
    }

    /**
     *Close address is an optional address which specifies the address to which
     *funds should be paid out to upon cooperative close. This field may only be
     *set if the peer supports the option upfront feature bit (call listpeers
     *to check). The remote peer will only accept cooperative closes to this
     *address if it is set.
     *Note: If this value is set on channel creation, you will *not* be able to
     *cooperatively close out to a different address.
     *
     * Generated from protobuf field <code>string close_address = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setCloseAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->close_address = $var;

        return $this;
    }

    /**
     *An optional, unique identifier of 32 random bytes that will be used as the
     *pending channel ID to identify the channel while it is in the pre-pending
     *state.
     *
     * Generated from protobuf field <code>bytes pending_chan_id = 8;</code>
     * @return string
     */
    public function getPendingChanId()
    {
        return $this->pending_chan_id;
    }

    /**
     *An optional, unique identifier of 32 random bytes that will be used as the
     *pending channel ID to identify the channel while it is in the pre-pending
     *state.
     *
     * Generated from protobuf field <code>bytes pending_chan_id = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setPendingChanId($var)
    {
        GPBUtil::checkString($var, False);
        $this->pending_chan_id = $var;

        return $this;
    }

    /**
     *The explicit commitment type to use. Note this field will only be used if
     *the remote peer supports explicit channel negotiation.
     *
     * Generated from protobuf field <code>.lnrpc.CommitmentType commitment_type = 9;</code>
     * @return int
     */
    public function getCommitmentType()
    {
        return $this->commitment_type;
    }

    /**
     *The explicit commitment type to use. Note this field will only be used if
     *the remote peer supports explicit channel negotiation.
     *
     * Generated from protobuf field <code>.lnrpc.CommitmentType commitment_type = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setCommitmentType($var)
    {
        GPBUtil::checkEnum($var, \Lnrpc\CommitmentType::class);
        $this->commitment_type = $var;

        return $this;
    }

}

