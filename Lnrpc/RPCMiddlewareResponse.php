<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: lightning.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.RPCMiddlewareResponse</code>
 */
class RPCMiddlewareResponse extends \Google\Protobuf\Internal\Message
{
    /**
     *The request message ID this response refers to. Must always be set when
     *giving feedback to an intercept but is ignored for the initial registration
     *message.
     *
     * Generated from protobuf field <code>uint64 ref_msg_id = 1;</code>
     */
    protected $ref_msg_id = 0;
    protected $middleware_message;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $ref_msg_id
     *          The request message ID this response refers to. Must always be set when
     *          giving feedback to an intercept but is ignored for the initial registration
     *          message.
     *     @type \Lnrpc\MiddlewareRegistration $register
     *          The registration message identifies the middleware that's being
     *          registered in lnd. The registration message must be sent immediately
     *          after initiating the RegisterRpcMiddleware stream, otherwise lnd will
     *          time out the attempt and terminate the request. NOTE: The middleware
     *          will only receive interception messages for requests that contain a
     *          macaroon with the custom caveat that the middleware declares it is
     *          responsible for handling in the registration message! As a security
     *          measure, _no_ middleware can intercept requests made with _unencumbered_
     *          macaroons!
     *     @type \Lnrpc\InterceptFeedback $feedback
     *          The middleware received an interception request and gives feedback to
     *          it. The request_id indicates what message the feedback refers to.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Lightning::initOnce();
        parent::__construct($data);
    }

    /**
     *The request message ID this response refers to. Must always be set when
     *giving feedback to an intercept but is ignored for the initial registration
     *message.
     *
     * Generated from protobuf field <code>uint64 ref_msg_id = 1;</code>
     * @return int|string
     */
    public function getRefMsgId()
    {
        return $this->ref_msg_id;
    }

    /**
     *The request message ID this response refers to. Must always be set when
     *giving feedback to an intercept but is ignored for the initial registration
     *message.
     *
     * Generated from protobuf field <code>uint64 ref_msg_id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRefMsgId($var)
    {
        GPBUtil::checkUint64($var);
        $this->ref_msg_id = $var;

        return $this;
    }

    /**
     *The registration message identifies the middleware that's being
     *registered in lnd. The registration message must be sent immediately
     *after initiating the RegisterRpcMiddleware stream, otherwise lnd will
     *time out the attempt and terminate the request. NOTE: The middleware
     *will only receive interception messages for requests that contain a
     *macaroon with the custom caveat that the middleware declares it is
     *responsible for handling in the registration message! As a security
     *measure, _no_ middleware can intercept requests made with _unencumbered_
     *macaroons!
     *
     * Generated from protobuf field <code>.lnrpc.MiddlewareRegistration register = 2;</code>
     * @return \Lnrpc\MiddlewareRegistration|null
     */
    public function getRegister()
    {
        return $this->readOneof(2);
    }

    public function hasRegister()
    {
        return $this->hasOneof(2);
    }

    /**
     *The registration message identifies the middleware that's being
     *registered in lnd. The registration message must be sent immediately
     *after initiating the RegisterRpcMiddleware stream, otherwise lnd will
     *time out the attempt and terminate the request. NOTE: The middleware
     *will only receive interception messages for requests that contain a
     *macaroon with the custom caveat that the middleware declares it is
     *responsible for handling in the registration message! As a security
     *measure, _no_ middleware can intercept requests made with _unencumbered_
     *macaroons!
     *
     * Generated from protobuf field <code>.lnrpc.MiddlewareRegistration register = 2;</code>
     * @param \Lnrpc\MiddlewareRegistration $var
     * @return $this
     */
    public function setRegister($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\MiddlewareRegistration::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     *The middleware received an interception request and gives feedback to
     *it. The request_id indicates what message the feedback refers to.
     *
     * Generated from protobuf field <code>.lnrpc.InterceptFeedback feedback = 3;</code>
     * @return \Lnrpc\InterceptFeedback|null
     */
    public function getFeedback()
    {
        return $this->readOneof(3);
    }

    public function hasFeedback()
    {
        return $this->hasOneof(3);
    }

    /**
     *The middleware received an interception request and gives feedback to
     *it. The request_id indicates what message the feedback refers to.
     *
     * Generated from protobuf field <code>.lnrpc.InterceptFeedback feedback = 3;</code>
     * @param \Lnrpc\InterceptFeedback $var
     * @return $this
     */
    public function setFeedback($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\InterceptFeedback::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMiddlewareMessage()
    {
        return $this->whichOneof("middleware_message");
    }

}

