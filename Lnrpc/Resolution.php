<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.Resolution</code>
 */
class Resolution extends \Google\Protobuf\Internal\Message
{
    /**
     * The type of output we are resolving.
     *
     * Generated from protobuf field <code>.lnrpc.ResolutionType resolution_type = 1;</code>
     */
    protected $resolution_type = 0;
    /**
     * The outcome of our on chain action that resolved the outpoint.
     *
     * Generated from protobuf field <code>.lnrpc.ResolutionOutcome outcome = 2;</code>
     */
    protected $outcome = 0;
    /**
     * The outpoint that was spent by the resolution.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 3;</code>
     */
    protected $outpoint = null;
    /**
     * The amount that was claimed by the resolution.
     *
     * Generated from protobuf field <code>uint64 amount_sat = 4;</code>
     */
    protected $amount_sat = 0;
    /**
     * The hex-encoded transaction ID of the sweep transaction that spent the
     * output.
     *
     * Generated from protobuf field <code>string sweep_txid = 5;</code>
     */
    protected $sweep_txid = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $resolution_type
     *           The type of output we are resolving.
     *     @type int $outcome
     *           The outcome of our on chain action that resolved the outpoint.
     *     @type \Lnrpc\OutPoint $outpoint
     *           The outpoint that was spent by the resolution.
     *     @type int|string $amount_sat
     *           The amount that was claimed by the resolution.
     *     @type string $sweep_txid
     *           The hex-encoded transaction ID of the sweep transaction that spent the
     *           output.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * The type of output we are resolving.
     *
     * Generated from protobuf field <code>.lnrpc.ResolutionType resolution_type = 1;</code>
     * @return int
     */
    public function getResolutionType()
    {
        return $this->resolution_type;
    }

    /**
     * The type of output we are resolving.
     *
     * Generated from protobuf field <code>.lnrpc.ResolutionType resolution_type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setResolutionType($var)
    {
        GPBUtil::checkEnum($var, \Lnrpc\ResolutionType::class);
        $this->resolution_type = $var;

        return $this;
    }

    /**
     * The outcome of our on chain action that resolved the outpoint.
     *
     * Generated from protobuf field <code>.lnrpc.ResolutionOutcome outcome = 2;</code>
     * @return int
     */
    public function getOutcome()
    {
        return $this->outcome;
    }

    /**
     * The outcome of our on chain action that resolved the outpoint.
     *
     * Generated from protobuf field <code>.lnrpc.ResolutionOutcome outcome = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setOutcome($var)
    {
        GPBUtil::checkEnum($var, \Lnrpc\ResolutionOutcome::class);
        $this->outcome = $var;

        return $this;
    }

    /**
     * The outpoint that was spent by the resolution.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 3;</code>
     * @return \Lnrpc\OutPoint
     */
    public function getOutpoint()
    {
        return isset($this->outpoint) ? $this->outpoint : null;
    }

    public function hasOutpoint()
    {
        return isset($this->outpoint);
    }

    public function clearOutpoint()
    {
        unset($this->outpoint);
    }

    /**
     * The outpoint that was spent by the resolution.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 3;</code>
     * @param \Lnrpc\OutPoint $var
     * @return $this
     */
    public function setOutpoint($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\OutPoint::class);
        $this->outpoint = $var;

        return $this;
    }

    /**
     * The amount that was claimed by the resolution.
     *
     * Generated from protobuf field <code>uint64 amount_sat = 4;</code>
     * @return int|string
     */
    public function getAmountSat()
    {
        return $this->amount_sat;
    }

    /**
     * The amount that was claimed by the resolution.
     *
     * Generated from protobuf field <code>uint64 amount_sat = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmountSat($var)
    {
        GPBUtil::checkUint64($var);
        $this->amount_sat = $var;

        return $this;
    }

    /**
     * The hex-encoded transaction ID of the sweep transaction that spent the
     * output.
     *
     * Generated from protobuf field <code>string sweep_txid = 5;</code>
     * @return string
     */
    public function getSweepTxid()
    {
        return $this->sweep_txid;
    }

    /**
     * The hex-encoded transaction ID of the sweep transaction that spent the
     * output.
     *
     * Generated from protobuf field <code>string sweep_txid = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setSweepTxid($var)
    {
        GPBUtil::checkString($var, True);
        $this->sweep_txid = $var;

        return $this;
    }

}

