<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.RestoreChanBackupRequest</code>
 */
class RestoreChanBackupRequest extends \Google\Protobuf\Internal\Message
{
    protected $backup;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Lnrpc\ChannelBackups $chan_backups
     *          The channels to restore as a list of channel/backup pairs.
     *     @type string $multi_chan_backup
     *          The channels to restore in the packed multi backup format. When using
     *          REST, this field must be encoded as base64.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     *The channels to restore as a list of channel/backup pairs.
     *
     * Generated from protobuf field <code>.lnrpc.ChannelBackups chan_backups = 1;</code>
     * @return \Lnrpc\ChannelBackups
     */
    public function getChanBackups()
    {
        return $this->readOneof(1);
    }

    public function hasChanBackups()
    {
        return $this->hasOneof(1);
    }

    /**
     *The channels to restore as a list of channel/backup pairs.
     *
     * Generated from protobuf field <code>.lnrpc.ChannelBackups chan_backups = 1;</code>
     * @param \Lnrpc\ChannelBackups $var
     * @return $this
     */
    public function setChanBackups($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\ChannelBackups::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     *The channels to restore in the packed multi backup format. When using
     *REST, this field must be encoded as base64.
     *
     * Generated from protobuf field <code>bytes multi_chan_backup = 2;</code>
     * @return string
     */
    public function getMultiChanBackup()
    {
        return $this->readOneof(2);
    }

    public function hasMultiChanBackup()
    {
        return $this->hasOneof(2);
    }

    /**
     *The channels to restore in the packed multi backup format. When using
     *REST, this field must be encoded as base64.
     *
     * Generated from protobuf field <code>bytes multi_chan_backup = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setMultiChanBackup($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getBackup()
    {
        return $this->whichOneof("backup");
    }

}

