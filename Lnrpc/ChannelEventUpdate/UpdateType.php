<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc\ChannelEventUpdate;

use UnexpectedValueException;

/**
 * Protobuf type <code>lnrpc.ChannelEventUpdate.UpdateType</code>
 */
class UpdateType
{
    /**
     * Generated from protobuf enum <code>OPEN_CHANNEL = 0;</code>
     */
    const OPEN_CHANNEL = 0;
    /**
     * Generated from protobuf enum <code>CLOSED_CHANNEL = 1;</code>
     */
    const CLOSED_CHANNEL = 1;
    /**
     * Generated from protobuf enum <code>ACTIVE_CHANNEL = 2;</code>
     */
    const ACTIVE_CHANNEL = 2;
    /**
     * Generated from protobuf enum <code>INACTIVE_CHANNEL = 3;</code>
     */
    const INACTIVE_CHANNEL = 3;
    /**
     * Generated from protobuf enum <code>PENDING_OPEN_CHANNEL = 4;</code>
     */
    const PENDING_OPEN_CHANNEL = 4;

    private static $valueToName = [
        self::OPEN_CHANNEL => 'OPEN_CHANNEL',
        self::CLOSED_CHANNEL => 'CLOSED_CHANNEL',
        self::ACTIVE_CHANNEL => 'ACTIVE_CHANNEL',
        self::INACTIVE_CHANNEL => 'INACTIVE_CHANNEL',
        self::PENDING_OPEN_CHANNEL => 'PENDING_OPEN_CHANNEL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(UpdateType::class, \Lnrpc\ChannelEventUpdate_UpdateType::class);

