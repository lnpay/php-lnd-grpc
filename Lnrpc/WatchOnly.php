<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletunlocker.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.WatchOnly</code>
 */
class WatchOnly extends \Google\Protobuf\Internal\Message
{
    /**
     *The unix timestamp in seconds of when the master key was created. lnd will
     *only start scanning for funds in blocks that are after the birthday which
     *can speed up the process significantly. If the birthday is not known, this
     *should be left at its default value of 0 in which case lnd will start
     *scanning from the first SegWit block (481824 on mainnet).
     *
     * Generated from protobuf field <code>uint64 master_key_birthday_timestamp = 1;</code>
     */
    protected $master_key_birthday_timestamp = 0;
    /**
     *The fingerprint of the root key (also known as the key with derivation path
     *m/) from which the account public keys were derived from. This may be
     *required by some hardware wallets for proper identification and signing. The
     *bytes must be in big-endian order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 2;</code>
     */
    protected $master_key_fingerprint = '';
    /**
     *The list of accounts to import. There _must_ be an account for all of lnd's
     *main key scopes: BIP49/BIP84 (m/49'/0'/0', m/84'/0'/0', note that the
     *coin type is always 0, even for testnet/regtest) and lnd's internal key
     *scope (m/1017'/<coin_type>'/<account>'), where account is the key family as
     *defined in `keychain/derivation.go` (currently indices 0 to 9).
     *
     * Generated from protobuf field <code>repeated .lnrpc.WatchOnlyAccount accounts = 3;</code>
     */
    private $accounts;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $master_key_birthday_timestamp
     *          The unix timestamp in seconds of when the master key was created. lnd will
     *          only start scanning for funds in blocks that are after the birthday which
     *          can speed up the process significantly. If the birthday is not known, this
     *          should be left at its default value of 0 in which case lnd will start
     *          scanning from the first SegWit block (481824 on mainnet).
     *     @type string $master_key_fingerprint
     *          The fingerprint of the root key (also known as the key with derivation path
     *          m/) from which the account public keys were derived from. This may be
     *          required by some hardware wallets for proper identification and signing. The
     *          bytes must be in big-endian order.
     *     @type array<\Lnrpc\WatchOnlyAccount>|\Google\Protobuf\Internal\RepeatedField $accounts
     *          The list of accounts to import. There _must_ be an account for all of lnd's
     *          main key scopes: BIP49/BIP84 (m/49'/0'/0', m/84'/0'/0', note that the
     *          coin type is always 0, even for testnet/regtest) and lnd's internal key
     *          scope (m/1017'/<coin_type>'/<account>'), where account is the key family as
     *          defined in `keychain/derivation.go` (currently indices 0 to 9).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletunlocker::initOnce();
        parent::__construct($data);
    }

    /**
     *The unix timestamp in seconds of when the master key was created. lnd will
     *only start scanning for funds in blocks that are after the birthday which
     *can speed up the process significantly. If the birthday is not known, this
     *should be left at its default value of 0 in which case lnd will start
     *scanning from the first SegWit block (481824 on mainnet).
     *
     * Generated from protobuf field <code>uint64 master_key_birthday_timestamp = 1;</code>
     * @return int|string
     */
    public function getMasterKeyBirthdayTimestamp()
    {
        return $this->master_key_birthday_timestamp;
    }

    /**
     *The unix timestamp in seconds of when the master key was created. lnd will
     *only start scanning for funds in blocks that are after the birthday which
     *can speed up the process significantly. If the birthday is not known, this
     *should be left at its default value of 0 in which case lnd will start
     *scanning from the first SegWit block (481824 on mainnet).
     *
     * Generated from protobuf field <code>uint64 master_key_birthday_timestamp = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMasterKeyBirthdayTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->master_key_birthday_timestamp = $var;

        return $this;
    }

    /**
     *The fingerprint of the root key (also known as the key with derivation path
     *m/) from which the account public keys were derived from. This may be
     *required by some hardware wallets for proper identification and signing. The
     *bytes must be in big-endian order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 2;</code>
     * @return string
     */
    public function getMasterKeyFingerprint()
    {
        return $this->master_key_fingerprint;
    }

    /**
     *The fingerprint of the root key (also known as the key with derivation path
     *m/) from which the account public keys were derived from. This may be
     *required by some hardware wallets for proper identification and signing. The
     *bytes must be in big-endian order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setMasterKeyFingerprint($var)
    {
        GPBUtil::checkString($var, False);
        $this->master_key_fingerprint = $var;

        return $this;
    }

    /**
     *The list of accounts to import. There _must_ be an account for all of lnd's
     *main key scopes: BIP49/BIP84 (m/49'/0'/0', m/84'/0'/0', note that the
     *coin type is always 0, even for testnet/regtest) and lnd's internal key
     *scope (m/1017'/<coin_type>'/<account>'), where account is the key family as
     *defined in `keychain/derivation.go` (currently indices 0 to 9).
     *
     * Generated from protobuf field <code>repeated .lnrpc.WatchOnlyAccount accounts = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAccounts()
    {
        return $this->accounts;
    }

    /**
     *The list of accounts to import. There _must_ be an account for all of lnd's
     *main key scopes: BIP49/BIP84 (m/49'/0'/0', m/84'/0'/0', note that the
     *coin type is always 0, even for testnet/regtest) and lnd's internal key
     *scope (m/1017'/<coin_type>'/<account>'), where account is the key family as
     *defined in `keychain/derivation.go` (currently indices 0 to 9).
     *
     * Generated from protobuf field <code>repeated .lnrpc.WatchOnlyAccount accounts = 3;</code>
     * @param array<\Lnrpc\WatchOnlyAccount>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAccounts($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Lnrpc\WatchOnlyAccount::class);
        $this->accounts = $arr;

        return $this;
    }

}

