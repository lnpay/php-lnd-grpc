<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.HTLC</code>
 */
class HTLC extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bool incoming = 1;</code>
     */
    private $incoming = false;
    /**
     * Generated from protobuf field <code>int64 amount = 2;</code>
     */
    private $amount = 0;
    /**
     * Generated from protobuf field <code>bytes hash_lock = 3;</code>
     */
    private $hash_lock = '';
    /**
     * Generated from protobuf field <code>uint32 expiration_height = 4;</code>
     */
    private $expiration_height = 0;
    /**
     * Index identifying the htlc on the channel.
     *
     * Generated from protobuf field <code>uint64 htlc_index = 5;</code>
     */
    private $htlc_index = 0;
    /**
     * If this HTLC is involved in a forwarding operation, this field indicates
     * the forwarding channel. For an outgoing htlc, it is the incoming channel.
     * For an incoming htlc, it is the outgoing channel. When the htlc
     * originates from this node or this node is the final destination,
     * forwarding_channel will be zero. The forwarding channel will also be zero
     * for htlcs that need to be forwarded but don't have a forwarding decision
     * persisted yet.
     *
     * Generated from protobuf field <code>uint64 forwarding_channel = 6;</code>
     */
    private $forwarding_channel = 0;
    /**
     * Index identifying the htlc on the forwarding channel.
     *
     * Generated from protobuf field <code>uint64 forwarding_htlc_index = 7;</code>
     */
    private $forwarding_htlc_index = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $incoming
     *     @type int|string $amount
     *     @type string $hash_lock
     *     @type int $expiration_height
     *     @type int|string $htlc_index
     *           Index identifying the htlc on the channel.
     *     @type int|string $forwarding_channel
     *           If this HTLC is involved in a forwarding operation, this field indicates
     *           the forwarding channel. For an outgoing htlc, it is the incoming channel.
     *           For an incoming htlc, it is the outgoing channel. When the htlc
     *           originates from this node or this node is the final destination,
     *           forwarding_channel will be zero. The forwarding channel will also be zero
     *           for htlcs that need to be forwarded but don't have a forwarding decision
     *           persisted yet.
     *     @type int|string $forwarding_htlc_index
     *           Index identifying the htlc on the forwarding channel.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bool incoming = 1;</code>
     * @return bool
     */
    public function getIncoming()
    {
        return $this->incoming;
    }

    /**
     * Generated from protobuf field <code>bool incoming = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setIncoming($var)
    {
        GPBUtil::checkBool($var);
        $this->incoming = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int64 amount = 2;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Generated from protobuf field <code>int64 amount = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes hash_lock = 3;</code>
     * @return string
     */
    public function getHashLock()
    {
        return $this->hash_lock;
    }

    /**
     * Generated from protobuf field <code>bytes hash_lock = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setHashLock($var)
    {
        GPBUtil::checkString($var, False);
        $this->hash_lock = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 expiration_height = 4;</code>
     * @return int
     */
    public function getExpirationHeight()
    {
        return $this->expiration_height;
    }

    /**
     * Generated from protobuf field <code>uint32 expiration_height = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setExpirationHeight($var)
    {
        GPBUtil::checkUint32($var);
        $this->expiration_height = $var;

        return $this;
    }

    /**
     * Index identifying the htlc on the channel.
     *
     * Generated from protobuf field <code>uint64 htlc_index = 5;</code>
     * @return int|string
     */
    public function getHtlcIndex()
    {
        return $this->htlc_index;
    }

    /**
     * Index identifying the htlc on the channel.
     *
     * Generated from protobuf field <code>uint64 htlc_index = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setHtlcIndex($var)
    {
        GPBUtil::checkUint64($var);
        $this->htlc_index = $var;

        return $this;
    }

    /**
     * If this HTLC is involved in a forwarding operation, this field indicates
     * the forwarding channel. For an outgoing htlc, it is the incoming channel.
     * For an incoming htlc, it is the outgoing channel. When the htlc
     * originates from this node or this node is the final destination,
     * forwarding_channel will be zero. The forwarding channel will also be zero
     * for htlcs that need to be forwarded but don't have a forwarding decision
     * persisted yet.
     *
     * Generated from protobuf field <code>uint64 forwarding_channel = 6;</code>
     * @return int|string
     */
    public function getForwardingChannel()
    {
        return $this->forwarding_channel;
    }

    /**
     * If this HTLC is involved in a forwarding operation, this field indicates
     * the forwarding channel. For an outgoing htlc, it is the incoming channel.
     * For an incoming htlc, it is the outgoing channel. When the htlc
     * originates from this node or this node is the final destination,
     * forwarding_channel will be zero. The forwarding channel will also be zero
     * for htlcs that need to be forwarded but don't have a forwarding decision
     * persisted yet.
     *
     * Generated from protobuf field <code>uint64 forwarding_channel = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setForwardingChannel($var)
    {
        GPBUtil::checkUint64($var);
        $this->forwarding_channel = $var;

        return $this;
    }

    /**
     * Index identifying the htlc on the forwarding channel.
     *
     * Generated from protobuf field <code>uint64 forwarding_htlc_index = 7;</code>
     * @return int|string
     */
    public function getForwardingHtlcIndex()
    {
        return $this->forwarding_htlc_index;
    }

    /**
     * Index identifying the htlc on the forwarding channel.
     *
     * Generated from protobuf field <code>uint64 forwarding_htlc_index = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setForwardingHtlcIndex($var)
    {
        GPBUtil::checkUint64($var);
        $this->forwarding_htlc_index = $var;

        return $this;
    }

}

