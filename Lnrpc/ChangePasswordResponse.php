<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletunlocker.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.ChangePasswordResponse</code>
 */
class ChangePasswordResponse extends \Google\Protobuf\Internal\Message
{
    /**
     *The binary serialized admin macaroon that can be used to access the daemon
     *after rotating the macaroon root key. If both the stateless_init and
     *new_macaroon_root_key parameter were set to true, this is the ONLY copy of
     *the macaroon that was created from the new root key and MUST be stored
     *safely by the caller. Otherwise a copy of this macaroon is also persisted on
     *disk by the daemon, together with other macaroon files.
     *
     * Generated from protobuf field <code>bytes admin_macaroon = 1;</code>
     */
    protected $admin_macaroon = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $admin_macaroon
     *          The binary serialized admin macaroon that can be used to access the daemon
     *          after rotating the macaroon root key. If both the stateless_init and
     *          new_macaroon_root_key parameter were set to true, this is the ONLY copy of
     *          the macaroon that was created from the new root key and MUST be stored
     *          safely by the caller. Otherwise a copy of this macaroon is also persisted on
     *          disk by the daemon, together with other macaroon files.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletunlocker::initOnce();
        parent::__construct($data);
    }

    /**
     *The binary serialized admin macaroon that can be used to access the daemon
     *after rotating the macaroon root key. If both the stateless_init and
     *new_macaroon_root_key parameter were set to true, this is the ONLY copy of
     *the macaroon that was created from the new root key and MUST be stored
     *safely by the caller. Otherwise a copy of this macaroon is also persisted on
     *disk by the daemon, together with other macaroon files.
     *
     * Generated from protobuf field <code>bytes admin_macaroon = 1;</code>
     * @return string
     */
    public function getAdminMacaroon()
    {
        return $this->admin_macaroon;
    }

    /**
     *The binary serialized admin macaroon that can be used to access the daemon
     *after rotating the macaroon root key. If both the stateless_init and
     *new_macaroon_root_key parameter were set to true, this is the ONLY copy of
     *the macaroon that was created from the new root key and MUST be stored
     *safely by the caller. Otherwise a copy of this macaroon is also persisted on
     *disk by the daemon, together with other macaroon files.
     *
     * Generated from protobuf field <code>bytes admin_macaroon = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setAdminMacaroon($var)
    {
        GPBUtil::checkString($var, False);
        $this->admin_macaroon = $var;

        return $this;
    }

}

