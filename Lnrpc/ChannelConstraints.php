<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.ChannelConstraints</code>
 */
class ChannelConstraints extends \Google\Protobuf\Internal\Message
{
    /**
     *The CSV delay expressed in relative blocks. If the channel is force closed,
     *we will need to wait for this many blocks before we can regain our funds.
     *
     * Generated from protobuf field <code>uint32 csv_delay = 1;</code>
     */
    private $csv_delay = 0;
    /**
     * The minimum satoshis this node is required to reserve in its balance.
     *
     * Generated from protobuf field <code>uint64 chan_reserve_sat = 2;</code>
     */
    private $chan_reserve_sat = 0;
    /**
     * The dust limit (in satoshis) of the initiator's commitment tx.
     *
     * Generated from protobuf field <code>uint64 dust_limit_sat = 3;</code>
     */
    private $dust_limit_sat = 0;
    /**
     * The maximum amount of coins in millisatoshis that can be pending in this
     * channel.
     *
     * Generated from protobuf field <code>uint64 max_pending_amt_msat = 4;</code>
     */
    private $max_pending_amt_msat = 0;
    /**
     * The smallest HTLC in millisatoshis that the initiator will accept.
     *
     * Generated from protobuf field <code>uint64 min_htlc_msat = 5;</code>
     */
    private $min_htlc_msat = 0;
    /**
     * The total number of incoming HTLC's that the initiator will accept.
     *
     * Generated from protobuf field <code>uint32 max_accepted_htlcs = 6;</code>
     */
    private $max_accepted_htlcs = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $csv_delay
     *          The CSV delay expressed in relative blocks. If the channel is force closed,
     *          we will need to wait for this many blocks before we can regain our funds.
     *     @type int|string $chan_reserve_sat
     *           The minimum satoshis this node is required to reserve in its balance.
     *     @type int|string $dust_limit_sat
     *           The dust limit (in satoshis) of the initiator's commitment tx.
     *     @type int|string $max_pending_amt_msat
     *           The maximum amount of coins in millisatoshis that can be pending in this
     *           channel.
     *     @type int|string $min_htlc_msat
     *           The smallest HTLC in millisatoshis that the initiator will accept.
     *     @type int $max_accepted_htlcs
     *           The total number of incoming HTLC's that the initiator will accept.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     *The CSV delay expressed in relative blocks. If the channel is force closed,
     *we will need to wait for this many blocks before we can regain our funds.
     *
     * Generated from protobuf field <code>uint32 csv_delay = 1;</code>
     * @return int
     */
    public function getCsvDelay()
    {
        return $this->csv_delay;
    }

    /**
     *The CSV delay expressed in relative blocks. If the channel is force closed,
     *we will need to wait for this many blocks before we can regain our funds.
     *
     * Generated from protobuf field <code>uint32 csv_delay = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setCsvDelay($var)
    {
        GPBUtil::checkUint32($var);
        $this->csv_delay = $var;

        return $this;
    }

    /**
     * The minimum satoshis this node is required to reserve in its balance.
     *
     * Generated from protobuf field <code>uint64 chan_reserve_sat = 2;</code>
     * @return int|string
     */
    public function getChanReserveSat()
    {
        return $this->chan_reserve_sat;
    }

    /**
     * The minimum satoshis this node is required to reserve in its balance.
     *
     * Generated from protobuf field <code>uint64 chan_reserve_sat = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setChanReserveSat($var)
    {
        GPBUtil::checkUint64($var);
        $this->chan_reserve_sat = $var;

        return $this;
    }

    /**
     * The dust limit (in satoshis) of the initiator's commitment tx.
     *
     * Generated from protobuf field <code>uint64 dust_limit_sat = 3;</code>
     * @return int|string
     */
    public function getDustLimitSat()
    {
        return $this->dust_limit_sat;
    }

    /**
     * The dust limit (in satoshis) of the initiator's commitment tx.
     *
     * Generated from protobuf field <code>uint64 dust_limit_sat = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDustLimitSat($var)
    {
        GPBUtil::checkUint64($var);
        $this->dust_limit_sat = $var;

        return $this;
    }

    /**
     * The maximum amount of coins in millisatoshis that can be pending in this
     * channel.
     *
     * Generated from protobuf field <code>uint64 max_pending_amt_msat = 4;</code>
     * @return int|string
     */
    public function getMaxPendingAmtMsat()
    {
        return $this->max_pending_amt_msat;
    }

    /**
     * The maximum amount of coins in millisatoshis that can be pending in this
     * channel.
     *
     * Generated from protobuf field <code>uint64 max_pending_amt_msat = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxPendingAmtMsat($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_pending_amt_msat = $var;

        return $this;
    }

    /**
     * The smallest HTLC in millisatoshis that the initiator will accept.
     *
     * Generated from protobuf field <code>uint64 min_htlc_msat = 5;</code>
     * @return int|string
     */
    public function getMinHtlcMsat()
    {
        return $this->min_htlc_msat;
    }

    /**
     * The smallest HTLC in millisatoshis that the initiator will accept.
     *
     * Generated from protobuf field <code>uint64 min_htlc_msat = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinHtlcMsat($var)
    {
        GPBUtil::checkUint64($var);
        $this->min_htlc_msat = $var;

        return $this;
    }

    /**
     * The total number of incoming HTLC's that the initiator will accept.
     *
     * Generated from protobuf field <code>uint32 max_accepted_htlcs = 6;</code>
     * @return int
     */
    public function getMaxAcceptedHtlcs()
    {
        return $this->max_accepted_htlcs;
    }

    /**
     * The total number of incoming HTLC's that the initiator will accept.
     *
     * Generated from protobuf field <code>uint32 max_accepted_htlcs = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxAcceptedHtlcs($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_accepted_htlcs = $var;

        return $this;
    }

}

