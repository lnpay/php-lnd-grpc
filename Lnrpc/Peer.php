<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.Peer</code>
 */
class Peer extends \Google\Protobuf\Internal\Message
{
    /**
     * The identity pubkey of the peer
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     */
    private $pub_key = '';
    /**
     * Network address of the peer; eg `127.0.0.1:10011`
     *
     * Generated from protobuf field <code>string address = 3;</code>
     */
    private $address = '';
    /**
     * Bytes of data transmitted to this peer
     *
     * Generated from protobuf field <code>uint64 bytes_sent = 4;</code>
     */
    private $bytes_sent = 0;
    /**
     * Bytes of data transmitted from this peer
     *
     * Generated from protobuf field <code>uint64 bytes_recv = 5;</code>
     */
    private $bytes_recv = 0;
    /**
     * Satoshis sent to this peer
     *
     * Generated from protobuf field <code>int64 sat_sent = 6;</code>
     */
    private $sat_sent = 0;
    /**
     * Satoshis received from this peer
     *
     * Generated from protobuf field <code>int64 sat_recv = 7;</code>
     */
    private $sat_recv = 0;
    /**
     * A channel is inbound if the counterparty initiated the channel
     *
     * Generated from protobuf field <code>bool inbound = 8;</code>
     */
    private $inbound = false;
    /**
     * Ping time to this peer
     *
     * Generated from protobuf field <code>int64 ping_time = 9;</code>
     */
    private $ping_time = 0;
    /**
     * The type of sync we are currently performing with this peer.
     *
     * Generated from protobuf field <code>.lnrpc.Peer.SyncType sync_type = 10;</code>
     */
    private $sync_type = 0;
    /**
     * Features advertised by the remote peer in their init message.
     *
     * Generated from protobuf field <code>map<uint32, .lnrpc.Feature> features = 11;</code>
     */
    private $features;
    /**
     *The latest errors received from our peer with timestamps, limited to the 10
     *most recent errors. These errors are tracked across peer connections, but
     *are not persisted across lnd restarts. Note that these errors are only
     *stored for peers that we have channels open with, to prevent peers from
     *spamming us with errors at no cost.
     *
     * Generated from protobuf field <code>repeated .lnrpc.TimestampedError errors = 12;</code>
     */
    private $errors;
    /**
     *The number of times we have recorded this peer going offline or coming
     *online, recorded across restarts. Note that this value is decreased over
     *time if the peer has not recently flapped, so that we can forgive peers
     *with historically high flap counts.
     *
     * Generated from protobuf field <code>int32 flap_count = 13;</code>
     */
    private $flap_count = 0;
    /**
     *The timestamp of the last flap we observed for this peer. If this value is
     *zero, we have not observed any flaps for this peer.
     *
     * Generated from protobuf field <code>int64 last_flap_ns = 14;</code>
     */
    private $last_flap_ns = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $pub_key
     *           The identity pubkey of the peer
     *     @type string $address
     *           Network address of the peer; eg `127.0.0.1:10011`
     *     @type int|string $bytes_sent
     *           Bytes of data transmitted to this peer
     *     @type int|string $bytes_recv
     *           Bytes of data transmitted from this peer
     *     @type int|string $sat_sent
     *           Satoshis sent to this peer
     *     @type int|string $sat_recv
     *           Satoshis received from this peer
     *     @type bool $inbound
     *           A channel is inbound if the counterparty initiated the channel
     *     @type int|string $ping_time
     *           Ping time to this peer
     *     @type int $sync_type
     *           The type of sync we are currently performing with this peer.
     *     @type array|\Google\Protobuf\Internal\MapField $features
     *           Features advertised by the remote peer in their init message.
     *     @type \Lnrpc\TimestampedError[]|\Google\Protobuf\Internal\RepeatedField $errors
     *          The latest errors received from our peer with timestamps, limited to the 10
     *          most recent errors. These errors are tracked across peer connections, but
     *          are not persisted across lnd restarts. Note that these errors are only
     *          stored for peers that we have channels open with, to prevent peers from
     *          spamming us with errors at no cost.
     *     @type int $flap_count
     *          The number of times we have recorded this peer going offline or coming
     *          online, recorded across restarts. Note that this value is decreased over
     *          time if the peer has not recently flapped, so that we can forgive peers
     *          with historically high flap counts.
     *     @type int|string $last_flap_ns
     *          The timestamp of the last flap we observed for this peer. If this value is
     *          zero, we have not observed any flaps for this peer.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * The identity pubkey of the peer
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     * @return string
     */
    public function getPubKey()
    {
        return $this->pub_key;
    }

    /**
     * The identity pubkey of the peer
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPubKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->pub_key = $var;

        return $this;
    }

    /**
     * Network address of the peer; eg `127.0.0.1:10011`
     *
     * Generated from protobuf field <code>string address = 3;</code>
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Network address of the peer; eg `127.0.0.1:10011`
     *
     * Generated from protobuf field <code>string address = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->address = $var;

        return $this;
    }

    /**
     * Bytes of data transmitted to this peer
     *
     * Generated from protobuf field <code>uint64 bytes_sent = 4;</code>
     * @return int|string
     */
    public function getBytesSent()
    {
        return $this->bytes_sent;
    }

    /**
     * Bytes of data transmitted to this peer
     *
     * Generated from protobuf field <code>uint64 bytes_sent = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBytesSent($var)
    {
        GPBUtil::checkUint64($var);
        $this->bytes_sent = $var;

        return $this;
    }

    /**
     * Bytes of data transmitted from this peer
     *
     * Generated from protobuf field <code>uint64 bytes_recv = 5;</code>
     * @return int|string
     */
    public function getBytesRecv()
    {
        return $this->bytes_recv;
    }

    /**
     * Bytes of data transmitted from this peer
     *
     * Generated from protobuf field <code>uint64 bytes_recv = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBytesRecv($var)
    {
        GPBUtil::checkUint64($var);
        $this->bytes_recv = $var;

        return $this;
    }

    /**
     * Satoshis sent to this peer
     *
     * Generated from protobuf field <code>int64 sat_sent = 6;</code>
     * @return int|string
     */
    public function getSatSent()
    {
        return $this->sat_sent;
    }

    /**
     * Satoshis sent to this peer
     *
     * Generated from protobuf field <code>int64 sat_sent = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSatSent($var)
    {
        GPBUtil::checkInt64($var);
        $this->sat_sent = $var;

        return $this;
    }

    /**
     * Satoshis received from this peer
     *
     * Generated from protobuf field <code>int64 sat_recv = 7;</code>
     * @return int|string
     */
    public function getSatRecv()
    {
        return $this->sat_recv;
    }

    /**
     * Satoshis received from this peer
     *
     * Generated from protobuf field <code>int64 sat_recv = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSatRecv($var)
    {
        GPBUtil::checkInt64($var);
        $this->sat_recv = $var;

        return $this;
    }

    /**
     * A channel is inbound if the counterparty initiated the channel
     *
     * Generated from protobuf field <code>bool inbound = 8;</code>
     * @return bool
     */
    public function getInbound()
    {
        return $this->inbound;
    }

    /**
     * A channel is inbound if the counterparty initiated the channel
     *
     * Generated from protobuf field <code>bool inbound = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setInbound($var)
    {
        GPBUtil::checkBool($var);
        $this->inbound = $var;

        return $this;
    }

    /**
     * Ping time to this peer
     *
     * Generated from protobuf field <code>int64 ping_time = 9;</code>
     * @return int|string
     */
    public function getPingTime()
    {
        return $this->ping_time;
    }

    /**
     * Ping time to this peer
     *
     * Generated from protobuf field <code>int64 ping_time = 9;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPingTime($var)
    {
        GPBUtil::checkInt64($var);
        $this->ping_time = $var;

        return $this;
    }

    /**
     * The type of sync we are currently performing with this peer.
     *
     * Generated from protobuf field <code>.lnrpc.Peer.SyncType sync_type = 10;</code>
     * @return int
     */
    public function getSyncType()
    {
        return $this->sync_type;
    }

    /**
     * The type of sync we are currently performing with this peer.
     *
     * Generated from protobuf field <code>.lnrpc.Peer.SyncType sync_type = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setSyncType($var)
    {
        GPBUtil::checkEnum($var, \Lnrpc\Peer_SyncType::class);
        $this->sync_type = $var;

        return $this;
    }

    /**
     * Features advertised by the remote peer in their init message.
     *
     * Generated from protobuf field <code>map<uint32, .lnrpc.Feature> features = 11;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getFeatures()
    {
        return $this->features;
    }

    /**
     * Features advertised by the remote peer in their init message.
     *
     * Generated from protobuf field <code>map<uint32, .lnrpc.Feature> features = 11;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setFeatures($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT32, \Google\Protobuf\Internal\GPBType::MESSAGE, \Lnrpc\Feature::class);
        $this->features = $arr;

        return $this;
    }

    /**
     *The latest errors received from our peer with timestamps, limited to the 10
     *most recent errors. These errors are tracked across peer connections, but
     *are not persisted across lnd restarts. Note that these errors are only
     *stored for peers that we have channels open with, to prevent peers from
     *spamming us with errors at no cost.
     *
     * Generated from protobuf field <code>repeated .lnrpc.TimestampedError errors = 12;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     *The latest errors received from our peer with timestamps, limited to the 10
     *most recent errors. These errors are tracked across peer connections, but
     *are not persisted across lnd restarts. Note that these errors are only
     *stored for peers that we have channels open with, to prevent peers from
     *spamming us with errors at no cost.
     *
     * Generated from protobuf field <code>repeated .lnrpc.TimestampedError errors = 12;</code>
     * @param \Lnrpc\TimestampedError[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setErrors($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Lnrpc\TimestampedError::class);
        $this->errors = $arr;

        return $this;
    }

    /**
     *The number of times we have recorded this peer going offline or coming
     *online, recorded across restarts. Note that this value is decreased over
     *time if the peer has not recently flapped, so that we can forgive peers
     *with historically high flap counts.
     *
     * Generated from protobuf field <code>int32 flap_count = 13;</code>
     * @return int
     */
    public function getFlapCount()
    {
        return $this->flap_count;
    }

    /**
     *The number of times we have recorded this peer going offline or coming
     *online, recorded across restarts. Note that this value is decreased over
     *time if the peer has not recently flapped, so that we can forgive peers
     *with historically high flap counts.
     *
     * Generated from protobuf field <code>int32 flap_count = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setFlapCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->flap_count = $var;

        return $this;
    }

    /**
     *The timestamp of the last flap we observed for this peer. If this value is
     *zero, we have not observed any flaps for this peer.
     *
     * Generated from protobuf field <code>int64 last_flap_ns = 14;</code>
     * @return int|string
     */
    public function getLastFlapNs()
    {
        return $this->last_flap_ns;
    }

    /**
     *The timestamp of the last flap we observed for this peer. If this value is
     *zero, we have not observed any flaps for this peer.
     *
     * Generated from protobuf field <code>int64 last_flap_ns = 14;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLastFlapNs($var)
    {
        GPBUtil::checkInt64($var);
        $this->last_flap_ns = $var;

        return $this;
    }

}

