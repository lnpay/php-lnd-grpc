<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.FloatMetric</code>
 */
class FloatMetric extends \Google\Protobuf\Internal\Message
{
    /**
     * Arbitrary float value.
     *
     * Generated from protobuf field <code>double value = 1;</code>
     */
    private $value = 0.0;
    /**
     * The value normalized to [0,1] or [-1,1].
     *
     * Generated from protobuf field <code>double normalized_value = 2;</code>
     */
    private $normalized_value = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $value
     *           Arbitrary float value.
     *     @type float $normalized_value
     *           The value normalized to [0,1] or [-1,1].
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * Arbitrary float value.
     *
     * Generated from protobuf field <code>double value = 1;</code>
     * @return float
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Arbitrary float value.
     *
     * Generated from protobuf field <code>double value = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkDouble($var);
        $this->value = $var;

        return $this;
    }

    /**
     * The value normalized to [0,1] or [-1,1].
     *
     * Generated from protobuf field <code>double normalized_value = 2;</code>
     * @return float
     */
    public function getNormalizedValue()
    {
        return $this->normalized_value;
    }

    /**
     * The value normalized to [0,1] or [-1,1].
     *
     * Generated from protobuf field <code>double normalized_value = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setNormalizedValue($var)
    {
        GPBUtil::checkDouble($var);
        $this->normalized_value = $var;

        return $this;
    }

}

