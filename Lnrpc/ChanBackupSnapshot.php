<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.ChanBackupSnapshot</code>
 */
class ChanBackupSnapshot extends \Google\Protobuf\Internal\Message
{
    /**
     *The set of new channels that have been added since the last channel backup
     *snapshot was requested.
     *
     * Generated from protobuf field <code>.lnrpc.ChannelBackups single_chan_backups = 1;</code>
     */
    protected $single_chan_backups = null;
    /**
     *A multi-channel backup that covers all open channels currently known to
     *lnd.
     *
     * Generated from protobuf field <code>.lnrpc.MultiChanBackup multi_chan_backup = 2;</code>
     */
    protected $multi_chan_backup = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Lnrpc\ChannelBackups $single_chan_backups
     *          The set of new channels that have been added since the last channel backup
     *          snapshot was requested.
     *     @type \Lnrpc\MultiChanBackup $multi_chan_backup
     *          A multi-channel backup that covers all open channels currently known to
     *          lnd.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     *The set of new channels that have been added since the last channel backup
     *snapshot was requested.
     *
     * Generated from protobuf field <code>.lnrpc.ChannelBackups single_chan_backups = 1;</code>
     * @return \Lnrpc\ChannelBackups
     */
    public function getSingleChanBackups()
    {
        return isset($this->single_chan_backups) ? $this->single_chan_backups : null;
    }

    public function hasSingleChanBackups()
    {
        return isset($this->single_chan_backups);
    }

    public function clearSingleChanBackups()
    {
        unset($this->single_chan_backups);
    }

    /**
     *The set of new channels that have been added since the last channel backup
     *snapshot was requested.
     *
     * Generated from protobuf field <code>.lnrpc.ChannelBackups single_chan_backups = 1;</code>
     * @param \Lnrpc\ChannelBackups $var
     * @return $this
     */
    public function setSingleChanBackups($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\ChannelBackups::class);
        $this->single_chan_backups = $var;

        return $this;
    }

    /**
     *A multi-channel backup that covers all open channels currently known to
     *lnd.
     *
     * Generated from protobuf field <code>.lnrpc.MultiChanBackup multi_chan_backup = 2;</code>
     * @return \Lnrpc\MultiChanBackup
     */
    public function getMultiChanBackup()
    {
        return isset($this->multi_chan_backup) ? $this->multi_chan_backup : null;
    }

    public function hasMultiChanBackup()
    {
        return isset($this->multi_chan_backup);
    }

    public function clearMultiChanBackup()
    {
        unset($this->multi_chan_backup);
    }

    /**
     *A multi-channel backup that covers all open channels currently known to
     *lnd.
     *
     * Generated from protobuf field <code>.lnrpc.MultiChanBackup multi_chan_backup = 2;</code>
     * @param \Lnrpc\MultiChanBackup $var
     * @return $this
     */
    public function setMultiChanBackup($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\MultiChanBackup::class);
        $this->multi_chan_backup = $var;

        return $this;
    }

}

