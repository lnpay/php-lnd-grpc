<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.FundingTransitionMsg</code>
 */
class FundingTransitionMsg extends \Google\Protobuf\Internal\Message
{
    protected $trigger;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Lnrpc\FundingShim $shim_register
     *          The funding shim to register. This should be used before any
     *          channel funding has began by the remote party, as it is intended as a
     *          preparatory step for the full channel funding.
     *     @type \Lnrpc\FundingShimCancel $shim_cancel
     *           Used to cancel an existing registered funding shim.
     *     @type \Lnrpc\FundingPsbtVerify $psbt_verify
     *          Used to continue a funding flow that was initiated to be executed
     *          through a PSBT. This step verifies that the PSBT contains the correct
     *          outputs to fund the channel.
     *     @type \Lnrpc\FundingPsbtFinalize $psbt_finalize
     *          Used to continue a funding flow that was initiated to be executed
     *          through a PSBT. This step finalizes the funded and signed PSBT, finishes
     *          negotiation with the peer and finally publishes the resulting funding
     *          transaction.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     *The funding shim to register. This should be used before any
     *channel funding has began by the remote party, as it is intended as a
     *preparatory step for the full channel funding.
     *
     * Generated from protobuf field <code>.lnrpc.FundingShim shim_register = 1;</code>
     * @return \Lnrpc\FundingShim
     */
    public function getShimRegister()
    {
        return $this->readOneof(1);
    }

    public function hasShimRegister()
    {
        return $this->hasOneof(1);
    }

    /**
     *The funding shim to register. This should be used before any
     *channel funding has began by the remote party, as it is intended as a
     *preparatory step for the full channel funding.
     *
     * Generated from protobuf field <code>.lnrpc.FundingShim shim_register = 1;</code>
     * @param \Lnrpc\FundingShim $var
     * @return $this
     */
    public function setShimRegister($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\FundingShim::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Used to cancel an existing registered funding shim.
     *
     * Generated from protobuf field <code>.lnrpc.FundingShimCancel shim_cancel = 2;</code>
     * @return \Lnrpc\FundingShimCancel
     */
    public function getShimCancel()
    {
        return $this->readOneof(2);
    }

    public function hasShimCancel()
    {
        return $this->hasOneof(2);
    }

    /**
     * Used to cancel an existing registered funding shim.
     *
     * Generated from protobuf field <code>.lnrpc.FundingShimCancel shim_cancel = 2;</code>
     * @param \Lnrpc\FundingShimCancel $var
     * @return $this
     */
    public function setShimCancel($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\FundingShimCancel::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     *Used to continue a funding flow that was initiated to be executed
     *through a PSBT. This step verifies that the PSBT contains the correct
     *outputs to fund the channel.
     *
     * Generated from protobuf field <code>.lnrpc.FundingPsbtVerify psbt_verify = 3;</code>
     * @return \Lnrpc\FundingPsbtVerify
     */
    public function getPsbtVerify()
    {
        return $this->readOneof(3);
    }

    public function hasPsbtVerify()
    {
        return $this->hasOneof(3);
    }

    /**
     *Used to continue a funding flow that was initiated to be executed
     *through a PSBT. This step verifies that the PSBT contains the correct
     *outputs to fund the channel.
     *
     * Generated from protobuf field <code>.lnrpc.FundingPsbtVerify psbt_verify = 3;</code>
     * @param \Lnrpc\FundingPsbtVerify $var
     * @return $this
     */
    public function setPsbtVerify($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\FundingPsbtVerify::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     *Used to continue a funding flow that was initiated to be executed
     *through a PSBT. This step finalizes the funded and signed PSBT, finishes
     *negotiation with the peer and finally publishes the resulting funding
     *transaction.
     *
     * Generated from protobuf field <code>.lnrpc.FundingPsbtFinalize psbt_finalize = 4;</code>
     * @return \Lnrpc\FundingPsbtFinalize
     */
    public function getPsbtFinalize()
    {
        return $this->readOneof(4);
    }

    public function hasPsbtFinalize()
    {
        return $this->hasOneof(4);
    }

    /**
     *Used to continue a funding flow that was initiated to be executed
     *through a PSBT. This step finalizes the funded and signed PSBT, finishes
     *negotiation with the peer and finally publishes the resulting funding
     *transaction.
     *
     * Generated from protobuf field <code>.lnrpc.FundingPsbtFinalize psbt_finalize = 4;</code>
     * @param \Lnrpc\FundingPsbtFinalize $var
     * @return $this
     */
    public function setPsbtFinalize($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\FundingPsbtFinalize::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getTrigger()
    {
        return $this->whichOneof("trigger");
    }

}

