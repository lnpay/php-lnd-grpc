<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletkit.proto

namespace Walletrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>walletrpc.ImportTapscriptRequest</code>
 */
class ImportTapscriptRequest extends \Google\Protobuf\Internal\Message
{
    /**
     *The internal public key, serialized as 32-byte x-only public key.
     *
     * Generated from protobuf field <code>bytes internal_public_key = 1;</code>
     */
    protected $internal_public_key = '';
    protected $script;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $internal_public_key
     *          The internal public key, serialized as 32-byte x-only public key.
     *     @type \Walletrpc\TapscriptFullTree $full_tree
     *          The full script tree with all individual leaves is known and the root
     *          hash can be constructed from the full tree directly.
     *     @type \Walletrpc\TapscriptPartialReveal $partial_reveal
     *          Only a single script leaf is known. To construct the root hash, the full
     *          inclusion proof must also be provided.
     *     @type string $root_hash_only
     *          Only the root hash of the Taproot script tree (or other form of Taproot
     *          commitment) is known.
     *     @type bool $full_key_only
     *          Only the final, tweaked Taproot key is known and no additional
     *          information about the internal key or type of tweak that was used to
     *          derive it. When this is set, the wallet treats the key in
     *          internal_public_key as the Taproot key directly. This can be useful for
     *          tracking arbitrary Taproot outputs without the goal of ever being able
     *          to spend from them through the internal wallet.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletkit::initOnce();
        parent::__construct($data);
    }

    /**
     *The internal public key, serialized as 32-byte x-only public key.
     *
     * Generated from protobuf field <code>bytes internal_public_key = 1;</code>
     * @return string
     */
    public function getInternalPublicKey()
    {
        return $this->internal_public_key;
    }

    /**
     *The internal public key, serialized as 32-byte x-only public key.
     *
     * Generated from protobuf field <code>bytes internal_public_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setInternalPublicKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->internal_public_key = $var;

        return $this;
    }

    /**
     *The full script tree with all individual leaves is known and the root
     *hash can be constructed from the full tree directly.
     *
     * Generated from protobuf field <code>.walletrpc.TapscriptFullTree full_tree = 2;</code>
     * @return \Walletrpc\TapscriptFullTree|null
     */
    public function getFullTree()
    {
        return $this->readOneof(2);
    }

    public function hasFullTree()
    {
        return $this->hasOneof(2);
    }

    /**
     *The full script tree with all individual leaves is known and the root
     *hash can be constructed from the full tree directly.
     *
     * Generated from protobuf field <code>.walletrpc.TapscriptFullTree full_tree = 2;</code>
     * @param \Walletrpc\TapscriptFullTree $var
     * @return $this
     */
    public function setFullTree($var)
    {
        GPBUtil::checkMessage($var, \Walletrpc\TapscriptFullTree::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     *Only a single script leaf is known. To construct the root hash, the full
     *inclusion proof must also be provided.
     *
     * Generated from protobuf field <code>.walletrpc.TapscriptPartialReveal partial_reveal = 3;</code>
     * @return \Walletrpc\TapscriptPartialReveal|null
     */
    public function getPartialReveal()
    {
        return $this->readOneof(3);
    }

    public function hasPartialReveal()
    {
        return $this->hasOneof(3);
    }

    /**
     *Only a single script leaf is known. To construct the root hash, the full
     *inclusion proof must also be provided.
     *
     * Generated from protobuf field <code>.walletrpc.TapscriptPartialReveal partial_reveal = 3;</code>
     * @param \Walletrpc\TapscriptPartialReveal $var
     * @return $this
     */
    public function setPartialReveal($var)
    {
        GPBUtil::checkMessage($var, \Walletrpc\TapscriptPartialReveal::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     *Only the root hash of the Taproot script tree (or other form of Taproot
     *commitment) is known.
     *
     * Generated from protobuf field <code>bytes root_hash_only = 4;</code>
     * @return string
     */
    public function getRootHashOnly()
    {
        return $this->readOneof(4);
    }

    public function hasRootHashOnly()
    {
        return $this->hasOneof(4);
    }

    /**
     *Only the root hash of the Taproot script tree (or other form of Taproot
     *commitment) is known.
     *
     * Generated from protobuf field <code>bytes root_hash_only = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setRootHashOnly($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     *Only the final, tweaked Taproot key is known and no additional
     *information about the internal key or type of tweak that was used to
     *derive it. When this is set, the wallet treats the key in
     *internal_public_key as the Taproot key directly. This can be useful for
     *tracking arbitrary Taproot outputs without the goal of ever being able
     *to spend from them through the internal wallet.
     *
     * Generated from protobuf field <code>bool full_key_only = 5;</code>
     * @return bool
     */
    public function getFullKeyOnly()
    {
        return $this->readOneof(5);
    }

    public function hasFullKeyOnly()
    {
        return $this->hasOneof(5);
    }

    /**
     *Only the final, tweaked Taproot key is known and no additional
     *information about the internal key or type of tweak that was used to
     *derive it. When this is set, the wallet treats the key in
     *internal_public_key as the Taproot key directly. This can be useful for
     *tracking arbitrary Taproot outputs without the goal of ever being able
     *to spend from them through the internal wallet.
     *
     * Generated from protobuf field <code>bool full_key_only = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setFullKeyOnly($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getScript()
    {
        return $this->whichOneof("script");
    }

}

