<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletkit.proto

namespace Walletrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>walletrpc.PendingSweep</code>
 */
class PendingSweep extends \Google\Protobuf\Internal\Message
{
    /**
     * The outpoint of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 1;</code>
     */
    private $outpoint = null;
    /**
     * The witness type of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>.walletrpc.WitnessType witness_type = 2;</code>
     */
    private $witness_type = 0;
    /**
     * The value of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>uint32 amount_sat = 3;</code>
     */
    private $amount_sat = 0;
    /**
     *The fee rate we'll use to sweep the output. The fee rate is only determined
     *once a sweeping transaction for the output is created, so it's possible for
     *this to be 0 before this.
     *
     * Generated from protobuf field <code>uint32 sat_per_byte = 4;</code>
     */
    private $sat_per_byte = 0;
    /**
     * The number of broadcast attempts we've made to sweep the output.
     *
     * Generated from protobuf field <code>uint32 broadcast_attempts = 5;</code>
     */
    private $broadcast_attempts = 0;
    /**
     *The next height of the chain at which we'll attempt to broadcast the
     *sweep transaction of the output.
     *
     * Generated from protobuf field <code>uint32 next_broadcast_height = 6;</code>
     */
    private $next_broadcast_height = 0;
    /**
     * The requested confirmation target for this output.
     *
     * Generated from protobuf field <code>uint32 requested_conf_target = 8;</code>
     */
    private $requested_conf_target = 0;
    /**
     * The requested fee rate, expressed in sat/byte, for this output.
     *
     * Generated from protobuf field <code>uint32 requested_sat_per_byte = 9;</code>
     */
    private $requested_sat_per_byte = 0;
    /**
     **
     *Whether this input must be force-swept. This means that it is swept even
     *if it has a negative yield.
     *
     * Generated from protobuf field <code>bool force = 7;</code>
     */
    private $force = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Lnrpc\OutPoint $outpoint
     *           The outpoint of the output we're attempting to sweep.
     *     @type int $witness_type
     *           The witness type of the output we're attempting to sweep.
     *     @type int $amount_sat
     *           The value of the output we're attempting to sweep.
     *     @type int $sat_per_byte
     *          The fee rate we'll use to sweep the output. The fee rate is only determined
     *          once a sweeping transaction for the output is created, so it's possible for
     *          this to be 0 before this.
     *     @type int $broadcast_attempts
     *           The number of broadcast attempts we've made to sweep the output.
     *     @type int $next_broadcast_height
     *          The next height of the chain at which we'll attempt to broadcast the
     *          sweep transaction of the output.
     *     @type int $requested_conf_target
     *           The requested confirmation target for this output.
     *     @type int $requested_sat_per_byte
     *           The requested fee rate, expressed in sat/byte, for this output.
     *     @type bool $force
     *          *
     *          Whether this input must be force-swept. This means that it is swept even
     *          if it has a negative yield.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletkit::initOnce();
        parent::__construct($data);
    }

    /**
     * The outpoint of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 1;</code>
     * @return \Lnrpc\OutPoint
     */
    public function getOutpoint()
    {
        return $this->outpoint;
    }

    /**
     * The outpoint of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 1;</code>
     * @param \Lnrpc\OutPoint $var
     * @return $this
     */
    public function setOutpoint($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\OutPoint::class);
        $this->outpoint = $var;

        return $this;
    }

    /**
     * The witness type of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>.walletrpc.WitnessType witness_type = 2;</code>
     * @return int
     */
    public function getWitnessType()
    {
        return $this->witness_type;
    }

    /**
     * The witness type of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>.walletrpc.WitnessType witness_type = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setWitnessType($var)
    {
        GPBUtil::checkEnum($var, \Walletrpc\WitnessType::class);
        $this->witness_type = $var;

        return $this;
    }

    /**
     * The value of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>uint32 amount_sat = 3;</code>
     * @return int
     */
    public function getAmountSat()
    {
        return $this->amount_sat;
    }

    /**
     * The value of the output we're attempting to sweep.
     *
     * Generated from protobuf field <code>uint32 amount_sat = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setAmountSat($var)
    {
        GPBUtil::checkUint32($var);
        $this->amount_sat = $var;

        return $this;
    }

    /**
     *The fee rate we'll use to sweep the output. The fee rate is only determined
     *once a sweeping transaction for the output is created, so it's possible for
     *this to be 0 before this.
     *
     * Generated from protobuf field <code>uint32 sat_per_byte = 4;</code>
     * @return int
     */
    public function getSatPerByte()
    {
        return $this->sat_per_byte;
    }

    /**
     *The fee rate we'll use to sweep the output. The fee rate is only determined
     *once a sweeping transaction for the output is created, so it's possible for
     *this to be 0 before this.
     *
     * Generated from protobuf field <code>uint32 sat_per_byte = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setSatPerByte($var)
    {
        GPBUtil::checkUint32($var);
        $this->sat_per_byte = $var;

        return $this;
    }

    /**
     * The number of broadcast attempts we've made to sweep the output.
     *
     * Generated from protobuf field <code>uint32 broadcast_attempts = 5;</code>
     * @return int
     */
    public function getBroadcastAttempts()
    {
        return $this->broadcast_attempts;
    }

    /**
     * The number of broadcast attempts we've made to sweep the output.
     *
     * Generated from protobuf field <code>uint32 broadcast_attempts = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setBroadcastAttempts($var)
    {
        GPBUtil::checkUint32($var);
        $this->broadcast_attempts = $var;

        return $this;
    }

    /**
     *The next height of the chain at which we'll attempt to broadcast the
     *sweep transaction of the output.
     *
     * Generated from protobuf field <code>uint32 next_broadcast_height = 6;</code>
     * @return int
     */
    public function getNextBroadcastHeight()
    {
        return $this->next_broadcast_height;
    }

    /**
     *The next height of the chain at which we'll attempt to broadcast the
     *sweep transaction of the output.
     *
     * Generated from protobuf field <code>uint32 next_broadcast_height = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setNextBroadcastHeight($var)
    {
        GPBUtil::checkUint32($var);
        $this->next_broadcast_height = $var;

        return $this;
    }

    /**
     * The requested confirmation target for this output.
     *
     * Generated from protobuf field <code>uint32 requested_conf_target = 8;</code>
     * @return int
     */
    public function getRequestedConfTarget()
    {
        return $this->requested_conf_target;
    }

    /**
     * The requested confirmation target for this output.
     *
     * Generated from protobuf field <code>uint32 requested_conf_target = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setRequestedConfTarget($var)
    {
        GPBUtil::checkUint32($var);
        $this->requested_conf_target = $var;

        return $this;
    }

    /**
     * The requested fee rate, expressed in sat/byte, for this output.
     *
     * Generated from protobuf field <code>uint32 requested_sat_per_byte = 9;</code>
     * @return int
     */
    public function getRequestedSatPerByte()
    {
        return $this->requested_sat_per_byte;
    }

    /**
     * The requested fee rate, expressed in sat/byte, for this output.
     *
     * Generated from protobuf field <code>uint32 requested_sat_per_byte = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setRequestedSatPerByte($var)
    {
        GPBUtil::checkUint32($var);
        $this->requested_sat_per_byte = $var;

        return $this;
    }

    /**
     **
     *Whether this input must be force-swept. This means that it is swept even
     *if it has a negative yield.
     *
     * Generated from protobuf field <code>bool force = 7;</code>
     * @return bool
     */
    public function getForce()
    {
        return $this->force;
    }

    /**
     **
     *Whether this input must be force-swept. This means that it is swept even
     *if it has a negative yield.
     *
     * Generated from protobuf field <code>bool force = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setForce($var)
    {
        GPBUtil::checkBool($var);
        $this->force = $var;

        return $this;
    }

}

