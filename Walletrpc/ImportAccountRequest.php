<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletkit.proto

namespace Walletrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>walletrpc.ImportAccountRequest</code>
 */
class ImportAccountRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * A name to identify the account with.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     *A public key that corresponds to a wallet account represented as an extended
     *key. It must conform to a derivation path of the form
     *m/purpose'/coin_type'/account'.
     *
     * Generated from protobuf field <code>string extended_public_key = 2;</code>
     */
    private $extended_public_key = '';
    /**
     *The fingerprint of the root key (also known as the key with derivation path
     *m/) from which the account public key was derived from. This may be required
     *by some hardware wallets for proper identification and signing. The bytes
     *must be in big-endian order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 3;</code>
     */
    private $master_key_fingerprint = '';
    /**
     *An address type is only required when the extended account public key has a
     *legacy version (xpub, tpub, etc.), such that the wallet cannot detect what
     *address scheme it belongs to.
     *
     * Generated from protobuf field <code>.walletrpc.AddressType address_type = 4;</code>
     */
    private $address_type = 0;
    /**
     *Whether a dry run should be attempted when importing the account. This
     *serves as a way to confirm whether the account is being imported correctly
     *by returning the first N addresses for the external and internal branches of
     *the account. If these addresses match as expected, then it should be safe to
     *import the account as is.
     *
     * Generated from protobuf field <code>bool dry_run = 5;</code>
     */
    private $dry_run = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           A name to identify the account with.
     *     @type string $extended_public_key
     *          A public key that corresponds to a wallet account represented as an extended
     *          key. It must conform to a derivation path of the form
     *          m/purpose'/coin_type'/account'.
     *     @type string $master_key_fingerprint
     *          The fingerprint of the root key (also known as the key with derivation path
     *          m/) from which the account public key was derived from. This may be required
     *          by some hardware wallets for proper identification and signing. The bytes
     *          must be in big-endian order.
     *     @type int $address_type
     *          An address type is only required when the extended account public key has a
     *          legacy version (xpub, tpub, etc.), such that the wallet cannot detect what
     *          address scheme it belongs to.
     *     @type bool $dry_run
     *          Whether a dry run should be attempted when importing the account. This
     *          serves as a way to confirm whether the account is being imported correctly
     *          by returning the first N addresses for the external and internal branches of
     *          the account. If these addresses match as expected, then it should be safe to
     *          import the account as is.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletkit::initOnce();
        parent::__construct($data);
    }

    /**
     * A name to identify the account with.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * A name to identify the account with.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     *A public key that corresponds to a wallet account represented as an extended
     *key. It must conform to a derivation path of the form
     *m/purpose'/coin_type'/account'.
     *
     * Generated from protobuf field <code>string extended_public_key = 2;</code>
     * @return string
     */
    public function getExtendedPublicKey()
    {
        return $this->extended_public_key;
    }

    /**
     *A public key that corresponds to a wallet account represented as an extended
     *key. It must conform to a derivation path of the form
     *m/purpose'/coin_type'/account'.
     *
     * Generated from protobuf field <code>string extended_public_key = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setExtendedPublicKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->extended_public_key = $var;

        return $this;
    }

    /**
     *The fingerprint of the root key (also known as the key with derivation path
     *m/) from which the account public key was derived from. This may be required
     *by some hardware wallets for proper identification and signing. The bytes
     *must be in big-endian order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 3;</code>
     * @return string
     */
    public function getMasterKeyFingerprint()
    {
        return $this->master_key_fingerprint;
    }

    /**
     *The fingerprint of the root key (also known as the key with derivation path
     *m/) from which the account public key was derived from. This may be required
     *by some hardware wallets for proper identification and signing. The bytes
     *must be in big-endian order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setMasterKeyFingerprint($var)
    {
        GPBUtil::checkString($var, False);
        $this->master_key_fingerprint = $var;

        return $this;
    }

    /**
     *An address type is only required when the extended account public key has a
     *legacy version (xpub, tpub, etc.), such that the wallet cannot detect what
     *address scheme it belongs to.
     *
     * Generated from protobuf field <code>.walletrpc.AddressType address_type = 4;</code>
     * @return int
     */
    public function getAddressType()
    {
        return $this->address_type;
    }

    /**
     *An address type is only required when the extended account public key has a
     *legacy version (xpub, tpub, etc.), such that the wallet cannot detect what
     *address scheme it belongs to.
     *
     * Generated from protobuf field <code>.walletrpc.AddressType address_type = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setAddressType($var)
    {
        GPBUtil::checkEnum($var, \Walletrpc\AddressType::class);
        $this->address_type = $var;

        return $this;
    }

    /**
     *Whether a dry run should be attempted when importing the account. This
     *serves as a way to confirm whether the account is being imported correctly
     *by returning the first N addresses for the external and internal branches of
     *the account. If these addresses match as expected, then it should be safe to
     *import the account as is.
     *
     * Generated from protobuf field <code>bool dry_run = 5;</code>
     * @return bool
     */
    public function getDryRun()
    {
        return $this->dry_run;
    }

    /**
     *Whether a dry run should be attempted when importing the account. This
     *serves as a way to confirm whether the account is being imported correctly
     *by returning the first N addresses for the external and internal branches of
     *the account. If these addresses match as expected, then it should be safe to
     *import the account as is.
     *
     * Generated from protobuf field <code>bool dry_run = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setDryRun($var)
    {
        GPBUtil::checkBool($var);
        $this->dry_run = $var;

        return $this;
    }

}

