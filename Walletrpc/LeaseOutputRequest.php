<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletkit.proto

namespace Walletrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>walletrpc.LeaseOutputRequest</code>
 */
class LeaseOutputRequest extends \Google\Protobuf\Internal\Message
{
    /**
     *An ID of 32 random bytes that must be unique for each distinct application
     *using this RPC which will be used to bound the output lease to.
     *
     * Generated from protobuf field <code>bytes id = 1;</code>
     */
    private $id = '';
    /**
     * The identifying outpoint of the output being leased.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 2;</code>
     */
    private $outpoint = null;
    /**
     * The time in seconds before the lock expires. If set to zero, the default
     * lock duration is used.
     *
     * Generated from protobuf field <code>uint64 expiration_seconds = 3;</code>
     */
    private $expiration_seconds = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *          An ID of 32 random bytes that must be unique for each distinct application
     *          using this RPC which will be used to bound the output lease to.
     *     @type \Lnrpc\OutPoint $outpoint
     *           The identifying outpoint of the output being leased.
     *     @type int|string $expiration_seconds
     *           The time in seconds before the lock expires. If set to zero, the default
     *           lock duration is used.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletkit::initOnce();
        parent::__construct($data);
    }

    /**
     *An ID of 32 random bytes that must be unique for each distinct application
     *using this RPC which will be used to bound the output lease to.
     *
     * Generated from protobuf field <code>bytes id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     *An ID of 32 random bytes that must be unique for each distinct application
     *using this RPC which will be used to bound the output lease to.
     *
     * Generated from protobuf field <code>bytes id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, False);
        $this->id = $var;

        return $this;
    }

    /**
     * The identifying outpoint of the output being leased.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 2;</code>
     * @return \Lnrpc\OutPoint
     */
    public function getOutpoint()
    {
        return $this->outpoint;
    }

    /**
     * The identifying outpoint of the output being leased.
     *
     * Generated from protobuf field <code>.lnrpc.OutPoint outpoint = 2;</code>
     * @param \Lnrpc\OutPoint $var
     * @return $this
     */
    public function setOutpoint($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\OutPoint::class);
        $this->outpoint = $var;

        return $this;
    }

    /**
     * The time in seconds before the lock expires. If set to zero, the default
     * lock duration is used.
     *
     * Generated from protobuf field <code>uint64 expiration_seconds = 3;</code>
     * @return int|string
     */
    public function getExpirationSeconds()
    {
        return $this->expiration_seconds;
    }

    /**
     * The time in seconds before the lock expires. If set to zero, the default
     * lock duration is used.
     *
     * Generated from protobuf field <code>uint64 expiration_seconds = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setExpirationSeconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->expiration_seconds = $var;

        return $this;
    }

}

