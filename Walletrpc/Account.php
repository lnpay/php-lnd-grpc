<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletkit.proto

namespace Walletrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>walletrpc.Account</code>
 */
class Account extends \Google\Protobuf\Internal\Message
{
    /**
     * The name used to identify the account.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     *The type of addresses the account supports.
     *AddressType                       | External Branch | Internal Branch
     *---------------------------------------------------------------------
     *WITNESS_PUBKEY_HASH               | P2WPKH          | P2WPKH
     *NESTED_WITNESS_PUBKEY_HASH        | NP2WPKH         | NP2WPKH
     *HYBRID_NESTED_WITNESS_PUBKEY_HASH | NP2WPKH         | P2WPKH
     *
     * Generated from protobuf field <code>.walletrpc.AddressType address_type = 2;</code>
     */
    private $address_type = 0;
    /**
     *The public key backing the account that all keys are derived from
     *represented as an extended key. This will always be empty for the default
     *imported account in which single public keys are imported into.
     *
     * Generated from protobuf field <code>string extended_public_key = 3;</code>
     */
    private $extended_public_key = '';
    /**
     *The fingerprint of the root key from which the account public key was
     *derived from. This will always be zero for the default imported account in
     *which single public keys are imported into. The bytes are in big-endian
     *order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 4;</code>
     */
    private $master_key_fingerprint = '';
    /**
     *The derivation path corresponding to the account public key. This will
     *always be empty for the default imported account in which single public keys
     *are imported into.
     *
     * Generated from protobuf field <code>string derivation_path = 5;</code>
     */
    private $derivation_path = '';
    /**
     *The number of keys derived from the external branch of the account public
     *key. This will always be zero for the default imported account in which
     *single public keys are imported into.
     *
     * Generated from protobuf field <code>uint32 external_key_count = 6;</code>
     */
    private $external_key_count = 0;
    /**
     *The number of keys derived from the internal branch of the account public
     *key. This will always be zero for the default imported account in which
     *single public keys are imported into.
     *
     * Generated from protobuf field <code>uint32 internal_key_count = 7;</code>
     */
    private $internal_key_count = 0;
    /**
     * Whether the wallet stores private keys for the account.
     *
     * Generated from protobuf field <code>bool watch_only = 8;</code>
     */
    private $watch_only = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           The name used to identify the account.
     *     @type int $address_type
     *          The type of addresses the account supports.
     *          AddressType                       | External Branch | Internal Branch
     *          ---------------------------------------------------------------------
     *          WITNESS_PUBKEY_HASH               | P2WPKH          | P2WPKH
     *          NESTED_WITNESS_PUBKEY_HASH        | NP2WPKH         | NP2WPKH
     *          HYBRID_NESTED_WITNESS_PUBKEY_HASH | NP2WPKH         | P2WPKH
     *     @type string $extended_public_key
     *          The public key backing the account that all keys are derived from
     *          represented as an extended key. This will always be empty for the default
     *          imported account in which single public keys are imported into.
     *     @type string $master_key_fingerprint
     *          The fingerprint of the root key from which the account public key was
     *          derived from. This will always be zero for the default imported account in
     *          which single public keys are imported into. The bytes are in big-endian
     *          order.
     *     @type string $derivation_path
     *          The derivation path corresponding to the account public key. This will
     *          always be empty for the default imported account in which single public keys
     *          are imported into.
     *     @type int $external_key_count
     *          The number of keys derived from the external branch of the account public
     *          key. This will always be zero for the default imported account in which
     *          single public keys are imported into.
     *     @type int $internal_key_count
     *          The number of keys derived from the internal branch of the account public
     *          key. This will always be zero for the default imported account in which
     *          single public keys are imported into.
     *     @type bool $watch_only
     *           Whether the wallet stores private keys for the account.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletkit::initOnce();
        parent::__construct($data);
    }

    /**
     * The name used to identify the account.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The name used to identify the account.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     *The type of addresses the account supports.
     *AddressType                       | External Branch | Internal Branch
     *---------------------------------------------------------------------
     *WITNESS_PUBKEY_HASH               | P2WPKH          | P2WPKH
     *NESTED_WITNESS_PUBKEY_HASH        | NP2WPKH         | NP2WPKH
     *HYBRID_NESTED_WITNESS_PUBKEY_HASH | NP2WPKH         | P2WPKH
     *
     * Generated from protobuf field <code>.walletrpc.AddressType address_type = 2;</code>
     * @return int
     */
    public function getAddressType()
    {
        return $this->address_type;
    }

    /**
     *The type of addresses the account supports.
     *AddressType                       | External Branch | Internal Branch
     *---------------------------------------------------------------------
     *WITNESS_PUBKEY_HASH               | P2WPKH          | P2WPKH
     *NESTED_WITNESS_PUBKEY_HASH        | NP2WPKH         | NP2WPKH
     *HYBRID_NESTED_WITNESS_PUBKEY_HASH | NP2WPKH         | P2WPKH
     *
     * Generated from protobuf field <code>.walletrpc.AddressType address_type = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setAddressType($var)
    {
        GPBUtil::checkEnum($var, \Walletrpc\AddressType::class);
        $this->address_type = $var;

        return $this;
    }

    /**
     *The public key backing the account that all keys are derived from
     *represented as an extended key. This will always be empty for the default
     *imported account in which single public keys are imported into.
     *
     * Generated from protobuf field <code>string extended_public_key = 3;</code>
     * @return string
     */
    public function getExtendedPublicKey()
    {
        return $this->extended_public_key;
    }

    /**
     *The public key backing the account that all keys are derived from
     *represented as an extended key. This will always be empty for the default
     *imported account in which single public keys are imported into.
     *
     * Generated from protobuf field <code>string extended_public_key = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setExtendedPublicKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->extended_public_key = $var;

        return $this;
    }

    /**
     *The fingerprint of the root key from which the account public key was
     *derived from. This will always be zero for the default imported account in
     *which single public keys are imported into. The bytes are in big-endian
     *order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 4;</code>
     * @return string
     */
    public function getMasterKeyFingerprint()
    {
        return $this->master_key_fingerprint;
    }

    /**
     *The fingerprint of the root key from which the account public key was
     *derived from. This will always be zero for the default imported account in
     *which single public keys are imported into. The bytes are in big-endian
     *order.
     *
     * Generated from protobuf field <code>bytes master_key_fingerprint = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setMasterKeyFingerprint($var)
    {
        GPBUtil::checkString($var, False);
        $this->master_key_fingerprint = $var;

        return $this;
    }

    /**
     *The derivation path corresponding to the account public key. This will
     *always be empty for the default imported account in which single public keys
     *are imported into.
     *
     * Generated from protobuf field <code>string derivation_path = 5;</code>
     * @return string
     */
    public function getDerivationPath()
    {
        return $this->derivation_path;
    }

    /**
     *The derivation path corresponding to the account public key. This will
     *always be empty for the default imported account in which single public keys
     *are imported into.
     *
     * Generated from protobuf field <code>string derivation_path = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setDerivationPath($var)
    {
        GPBUtil::checkString($var, True);
        $this->derivation_path = $var;

        return $this;
    }

    /**
     *The number of keys derived from the external branch of the account public
     *key. This will always be zero for the default imported account in which
     *single public keys are imported into.
     *
     * Generated from protobuf field <code>uint32 external_key_count = 6;</code>
     * @return int
     */
    public function getExternalKeyCount()
    {
        return $this->external_key_count;
    }

    /**
     *The number of keys derived from the external branch of the account public
     *key. This will always be zero for the default imported account in which
     *single public keys are imported into.
     *
     * Generated from protobuf field <code>uint32 external_key_count = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setExternalKeyCount($var)
    {
        GPBUtil::checkUint32($var);
        $this->external_key_count = $var;

        return $this;
    }

    /**
     *The number of keys derived from the internal branch of the account public
     *key. This will always be zero for the default imported account in which
     *single public keys are imported into.
     *
     * Generated from protobuf field <code>uint32 internal_key_count = 7;</code>
     * @return int
     */
    public function getInternalKeyCount()
    {
        return $this->internal_key_count;
    }

    /**
     *The number of keys derived from the internal branch of the account public
     *key. This will always be zero for the default imported account in which
     *single public keys are imported into.
     *
     * Generated from protobuf field <code>uint32 internal_key_count = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setInternalKeyCount($var)
    {
        GPBUtil::checkUint32($var);
        $this->internal_key_count = $var;

        return $this;
    }

    /**
     * Whether the wallet stores private keys for the account.
     *
     * Generated from protobuf field <code>bool watch_only = 8;</code>
     * @return bool
     */
    public function getWatchOnly()
    {
        return $this->watch_only;
    }

    /**
     * Whether the wallet stores private keys for the account.
     *
     * Generated from protobuf field <code>bool watch_only = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setWatchOnly($var)
    {
        GPBUtil::checkBool($var);
        $this->watch_only = $var;

        return $this;
    }

}

