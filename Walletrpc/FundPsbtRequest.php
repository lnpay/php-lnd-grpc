<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: walletkit.proto

namespace Walletrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>walletrpc.FundPsbtRequest</code>
 */
class FundPsbtRequest extends \Google\Protobuf\Internal\Message
{
    protected $template;
    protected $fees;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $psbt
     *          Use an existing PSBT packet as the template for the funded PSBT.
     *          The packet must contain at least one non-dust output. If one or more
     *          inputs are specified, no coin selection is performed. In that case every
     *          input must be an UTXO known to the wallet that has not been locked
     *          before. The sum of all inputs must be sufficiently greater than the sum
     *          of all outputs to pay a miner fee with the specified fee rate. A change
     *          output is added to the PSBT if necessary.
     *     @type \Walletrpc\TxTemplate $raw
     *          Use the outputs and optional inputs from this raw template.
     *     @type int $target_conf
     *          The target number of blocks that the transaction should be confirmed in.
     *     @type int $sat_per_vbyte
     *          The fee rate, expressed in sat/vbyte, that should be used to spend the
     *          input with.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Walletkit::initOnce();
        parent::__construct($data);
    }

    /**
     *Use an existing PSBT packet as the template for the funded PSBT.
     *The packet must contain at least one non-dust output. If one or more
     *inputs are specified, no coin selection is performed. In that case every
     *input must be an UTXO known to the wallet that has not been locked
     *before. The sum of all inputs must be sufficiently greater than the sum
     *of all outputs to pay a miner fee with the specified fee rate. A change
     *output is added to the PSBT if necessary.
     *
     * Generated from protobuf field <code>bytes psbt = 1;</code>
     * @return string
     */
    public function getPsbt()
    {
        return $this->readOneof(1);
    }

    /**
     *Use an existing PSBT packet as the template for the funded PSBT.
     *The packet must contain at least one non-dust output. If one or more
     *inputs are specified, no coin selection is performed. In that case every
     *input must be an UTXO known to the wallet that has not been locked
     *before. The sum of all inputs must be sufficiently greater than the sum
     *of all outputs to pay a miner fee with the specified fee rate. A change
     *output is added to the PSBT if necessary.
     *
     * Generated from protobuf field <code>bytes psbt = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPsbt($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     *Use the outputs and optional inputs from this raw template.
     *
     * Generated from protobuf field <code>.walletrpc.TxTemplate raw = 2;</code>
     * @return \Walletrpc\TxTemplate
     */
    public function getRaw()
    {
        return $this->readOneof(2);
    }

    /**
     *Use the outputs and optional inputs from this raw template.
     *
     * Generated from protobuf field <code>.walletrpc.TxTemplate raw = 2;</code>
     * @param \Walletrpc\TxTemplate $var
     * @return $this
     */
    public function setRaw($var)
    {
        GPBUtil::checkMessage($var, \Walletrpc\TxTemplate::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     *The target number of blocks that the transaction should be confirmed in.
     *
     * Generated from protobuf field <code>uint32 target_conf = 3;</code>
     * @return int
     */
    public function getTargetConf()
    {
        return $this->readOneof(3);
    }

    /**
     *The target number of blocks that the transaction should be confirmed in.
     *
     * Generated from protobuf field <code>uint32 target_conf = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setTargetConf($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     *The fee rate, expressed in sat/vbyte, that should be used to spend the
     *input with.
     *
     * Generated from protobuf field <code>uint32 sat_per_vbyte = 4;</code>
     * @return int
     */
    public function getSatPerVbyte()
    {
        return $this->readOneof(4);
    }

    /**
     *The fee rate, expressed in sat/vbyte, that should be used to spend the
     *input with.
     *
     * Generated from protobuf field <code>uint32 sat_per_vbyte = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setSatPerVbyte($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getTemplate()
    {
        return $this->whichOneof("template");
    }

    /**
     * @return string
     */
    public function getFees()
    {
        return $this->whichOneof("fees");
    }

}

