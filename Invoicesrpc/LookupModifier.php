<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: invoices.proto

namespace Invoicesrpc;

use UnexpectedValueException;

/**
 * Protobuf type <code>invoicesrpc.LookupModifier</code>
 */
class LookupModifier
{
    /**
     * The default look up modifier, no look up behavior is changed.
     *
     * Generated from protobuf enum <code>DEFAULT = 0;</code>
     */
    const PBDEFAULT = 0;
    /**
     *Indicates that when a look up is done based on a set_id, then only that set
     *of HTLCs related to that set ID should be returned.
     *
     * Generated from protobuf enum <code>HTLC_SET_ONLY = 1;</code>
     */
    const HTLC_SET_ONLY = 1;
    /**
     *Indicates that when a look up is done using a payment_addr, then no HTLCs
     *related to the payment_addr should be returned. This is useful when one
     *wants to be able to obtain the set of associated setIDs with a given
     *invoice, then look up the sub-invoices "projected" by that set ID.
     *
     * Generated from protobuf enum <code>HTLC_SET_BLANK = 2;</code>
     */
    const HTLC_SET_BLANK = 2;

    private static $valueToName = [
        self::PBDEFAULT => 'DEFAULT',
        self::HTLC_SET_ONLY => 'HTLC_SET_ONLY',
        self::HTLC_SET_BLANK => 'HTLC_SET_BLANK',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

